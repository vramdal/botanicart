'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMessage = exports.formatHTMLMessage = exports.formatRelative = exports.formatPlural = exports.formatNumber = exports.formatTime = exports.formatDate = exports.IntlWrapper = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _intl = require('part:@sanity/base/locale/intl');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let intl = null;

class IntlWrapper extends _react2.default.Component {

  componentWillMount() {
    intl = this.context.intl;
  }

  componentWillUpdate() {
    intl = this.context.intl;
  }

  render() {
    return _react2.default.createElement(
      'div',
      null,
      this.props.children
    );
  }
}

exports.IntlWrapper = IntlWrapper;
IntlWrapper.contextTypes = {
  intl: _intl.intlShape
};
IntlWrapper.propTypes = {
  children: _propTypes2.default.node.isRequired
};
const proxies = ['formatDate', 'formatTime', 'formatRelative', 'formatNumber', 'formatPlural', 'formatMessage', 'formatHTMLMessage'].reduce((target, fnName) => {
  target[fnName] = (...args) => {
    if (!intl) {
      throw new Error('IntlWrapper must be mounted before using format* functions');
    }

    return intl[fnName](...args);
  };
  return target;
}, {});

const formatDate = exports.formatDate = proxies.formatDate;
const formatTime = exports.formatTime = proxies.formatTime;
const formatNumber = exports.formatNumber = proxies.formatNumber;
const formatPlural = exports.formatPlural = proxies.formatPlural;
const formatRelative = exports.formatRelative = proxies.formatRelative;
const formatHTMLMessage = exports.formatHTMLMessage = (desc, values) => {
  return typeof desc === 'string' ? proxies.formatHTMLMessage({ id: desc }, values) : proxies.formatHTMLMessage(desc, values);
};

const formatMessage = exports.formatMessage = (desc, values) => {
  return typeof desc === 'string' ? proxies.formatMessage({ id: desc }, values) : proxies.formatMessage(desc, values);
};