'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _checkboxStyle = require('part:@sanity/components/toggles/checkbox-style');

var _checkboxStyle2 = _interopRequireDefault(_checkboxStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

class Checkbox extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      hasFocus: false
    }, this.handleFocus = event => {
      this.setState({ hasFocus: true });
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }, this.handleBlur = event => {
      this.setState({ hasFocus: false });
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }, this.setInput = el => {
      this._input = el;
    }, _temp;
  }

  componentDidMount() {
    if (typeof value === 'undefined' && this._input) {
      this._input.indeterminate = true;
    }
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _props = this.props;

    const disabled = _props.disabled,
          markers = _props.markers,
          checked = _props.checked,
          label = _props.label,
          children = _props.children,
          readOnly = _props.readOnly,
          rest = _objectWithoutProperties(_props, ['disabled', 'markers', 'checked', 'label', 'children', 'readOnly']);

    const hasFocus = this.state.hasFocus;


    let checkedClass = checked ? _checkboxStyle2.default.isChecked : _checkboxStyle2.default.unChecked;

    if (typeof checked === 'undefined') {
      checkedClass = _checkboxStyle2.default.indeterminate;
    }

    return _react2.default.createElement(
      'label',
      {
        title: label,
        className: `
          ${disabled || readOnly ? _checkboxStyle2.default.isDisabled : _checkboxStyle2.default.isEnabled}
          ${checkedClass}
          ${disabled || readOnly ? _checkboxStyle2.default.isDisabled : _checkboxStyle2.default.isEnabled}
          ${checked ? _checkboxStyle2.default.isChecked : _checkboxStyle2.default.unChecked}
          ${hasFocus ? _checkboxStyle2.default.hasFocus : ''}
        `,
        onBlur: this.handleBlur
      },
      _react2.default.createElement('input', _extends({}, rest, {
        className: _checkboxStyle2.default.input,
        type: 'checkbox',
        disabled: disabled || readOnly,
        checked: checked,
        ref: this.setInput,
        onFocus: this.handleFocus
      })),
      _react2.default.createElement(
        'div',
        { className: _checkboxStyle2.default.label },
        children || label
      ),
      _react2.default.createElement('div', { className: _checkboxStyle2.default.focusHelper }),
      _react2.default.createElement(
        'div',
        { className: _checkboxStyle2.default.boxOutline },
        _react2.default.createElement('div', { className: _checkboxStyle2.default.tickOutline })
      ),
      _react2.default.createElement('div', { className: _checkboxStyle2.default.tickHelper }),
      _react2.default.createElement('div', { className: _checkboxStyle2.default.rippleContainer })
    );
  }
}
exports.default = Checkbox;
Checkbox.propTypes = {
  label: _propTypes2.default.string,
  markers: _propTypes2.default.array,
  checked: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  children: _propTypes2.default.any,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func
};