'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _popoverStyle = require('part:@sanity/components/edititem/popover-style');

var _popoverStyle2 = _interopRequireDefault(_popoverStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _sticky = require('part:@sanity/components/portal/sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PADDING = 10;

class EditItemPopOver extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.lastY = 0, this.state = {
      arrowLeft: 0,
      popoverLeft: 0,
      isResizing: false
    }, this.setArrowElement = element => {
      this._arrowElement = element;
    }, this.setContentElement = element => {
      this._contentElement = element;
    }, this.setPopoverInnerElement = element => {
      this._popOverInnerElement = element;
    }, this.setRootElement = element => {
      this._rootElement = element;
    }, this.handlePortalResize = dimensions => {
      if (!this._popOverInnerElement) {
        return;
      }

      const rootLeft = dimensions.rootLeft,
            availableHeight = dimensions.availableHeight,
            availableWidth = dimensions.availableWidth,
            isScrolling = dimensions.isScrolling;


      const width = this._popOverInnerElement.offsetWidth;

      let popoverLeft = rootLeft - width / 2;

      if (availableWidth < rootLeft + width / 2) {
        popoverLeft = availableWidth - width - PADDING;
      }

      this.setState({
        popoverLeft: popoverLeft,
        maxHeight: availableHeight,
        arrowLeft: rootLeft,
        isResizing: isScrolling,
        wantedHeight: this._contentElement.scrollHeight
      });
    }, _temp;
  }

  render() {
    var _props = this.props;
    const title = _props.title,
          children = _props.children,
          actions = _props.actions,
          onClose = _props.onClose,
          isOpen = _props.isOpen;
    var _state = this.state;
    const popoverLeft = _state.popoverLeft,
          arrowLeft = _state.arrowLeft,
          maxHeight = _state.maxHeight,
          isResizing = _state.isResizing,
          wantedHeight = _state.wantedHeight;


    return _react2.default.createElement(
      'div',
      { style: { display: 'span' }, ref: this.setRootElement },
      _react2.default.createElement(
        _sticky2.default,
        {
          isOpen: isOpen,
          onResize: this.handlePortalResize,
          wantedHeight: wantedHeight
        },
        _react2.default.createElement(
          _Stacked2.default,
          null,
          isActive => _react2.default.createElement(
            'div',
            {
              ref: this.setPopoverInnerElement,
              className: _popoverStyle2.default.root
            },
            _react2.default.createElement('div', {
              className: title ? _popoverStyle2.default.filledArrow : _popoverStyle2.default.arrow,
              ref: this.setArrowElement,
              style: {
                left: `${arrowLeft}px`
              }
            }),
            _react2.default.createElement(
              'div',
              {
                className: _popoverStyle2.default.popover,
                style: {
                  left: `${popoverLeft}px`
                }
              },
              _react2.default.createElement(
                'button',
                { className: title ? _popoverStyle2.default.closeInverted : _popoverStyle2.default.close, type: 'button', onClick: onClose },
                _react2.default.createElement(_closeIcon2.default, null)
              ),
              title && _react2.default.createElement(
                'h3',
                { className: _popoverStyle2.default.title },
                title
              ),
              _react2.default.createElement(_Escapable2.default, { onEscape: event => (isActive || event.shiftKey) && onClose() }),
              _react2.default.createElement(
                _CaptureOutsideClicks2.default,
                { onClickOutside: isActive ? onClose : null },
                _react2.default.createElement(
                  'div',
                  {
                    ref: this.setContentElement,
                    className: isResizing ? _popoverStyle2.default.contentIsResizing : _popoverStyle2.default.content,
                    style: {
                      maxHeight: `${maxHeight}px`
                    }
                  },
                  children
                ),
                actions.length > 0 && _react2.default.createElement(
                  'div',
                  { className: _popoverStyle2.default.functions },
                  actions.map(action => {
                    return _react2.default.createElement(
                      _default2.default,
                      {
                        key: action.key,
                        onClick: action.handleClick,
                        kind: action.kind,
                        className: _popoverStyle2.default[`button_${action.kind}`] || _popoverStyle2.default.button
                      },
                      action.title
                    );
                  })
                )
              )
            )
          )
        )
      )
    );
  }
}
exports.default = EditItemPopOver;
EditItemPopOver.propTypes = {
  title: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  onClose: _propTypes2.default.func,
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    kind: _propTypes2.default.string,
    title: _propTypes2.default.string,
    key: _propTypes2.default.string,
    handleClick: _propTypes2.default.func
  })),
  isOpen: _propTypes2.default.bool
};
EditItemPopOver.defaultProps = {
  title: undefined,
  onClose() {},
  actions: [],
  isOpen: true
};