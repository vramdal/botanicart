'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _foldStyle = require('part:@sanity/components/edititem/fold-style');

var _foldStyle2 = _interopRequireDefault(_foldStyle);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _sticky = require('part:@sanity/components/portal/sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class EditItemFoldOut extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      left: 0,
      width: 500,
      height: 500
    }, this.setRootElement = element => {
      this._rootElement = element;
    }, this.setPortalModalElement = element => {
      this._portalModalElement = element;
    }, this.handleResize = dimensions => {
      this.setState({
        left: dimensions.rootLeft,
        width: this._rootElement.offsetWidth,
        height: this._portalModalElement.offsetHeight
      });
    }, _temp;
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown);
  }

  componentWillUnmount() {
    window.removeEventListener('keydown', this.handleKeyDown);
  }

  render() {
    var _props = this.props;
    const title = _props.title,
          onClose = _props.onClose,
          children = _props.children;
    var _state = this.state;
    const width = _state.width,
          left = _state.left,
          height = _state.height;

    return _react2.default.createElement(
      'div',
      {
        ref: this.setRootElement,
        className: _foldStyle2.default.root,
        style: { height: height ? `${height}px` : 'initial' }
      },
      _react2.default.createElement(
        _sticky2.default,
        {
          isOpen: true,
          onlyBottomSpace: true,
          useOverlay: true,
          addPadding: false,
          scrollIntoView: false,
          onResize: this.handleResize
        },
        _react2.default.createElement(
          _Stacked2.default,
          null,
          isActive => _react2.default.createElement(
            'div',
            {
              className: _foldStyle2.default.wrapper,
              ref: this.setPortalModalElement,
              style: {
                left: `${left}px`,
                width: `calc(${width}px + (${_foldStyle2.default.padding} * 2))`
              }
            },
            _react2.default.createElement(_Escapable2.default, { onEscape: event => (isActive || event.shiftKey) && onClose() }),
            _react2.default.createElement(
              _CaptureOutsideClicks2.default,
              { onClickOutside: isActive ? onClose : null },
              title && _react2.default.createElement(
                'div',
                { className: _foldStyle2.default.head },
                title,
                _react2.default.createElement(
                  'button',
                  { className: _foldStyle2.default.close, type: 'button', onClick: onClose },
                  _react2.default.createElement(_closeIcon2.default, null)
                )
              ),
              !title && _react2.default.createElement(
                'button',
                { className: _foldStyle2.default.closeDark, type: 'button', onClick: this.handleClose },
                _react2.default.createElement(_closeIcon2.default, null)
              ),
              _react2.default.createElement(
                'div',
                { className: _foldStyle2.default.content },
                children
              )
            )
          )
        )
      )
    );
  }
}
exports.default = EditItemFoldOut;
EditItemFoldOut.propTypes = {
  title: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  onClose: _propTypes2.default.func
};
EditItemFoldOut.defaultProps = {
  title: '',
  onClose() {} };