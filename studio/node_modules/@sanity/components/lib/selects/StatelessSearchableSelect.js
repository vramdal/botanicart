'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _searchableStyle = require('part:@sanity/components/selects/searchable-style');

var _searchableStyle2 = _interopRequireDefault(_searchableStyle);

var _angleDownIcon = require('part:@sanity/base/angle-down-icon');

var _angleDownIcon2 = _interopRequireDefault(_angleDownIcon);

var _default = require('part:@sanity/components/textinputs/default');

var _default2 = _interopRequireDefault(_default);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _SelectMenu = require('./SelectMenu');

var _SelectMenu2 = _interopRequireDefault(_SelectMenu);

var _sticky = require('part:@sanity/components/portal/sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint-disable complexity */


const noop = () => {};

class StatelessSearchableSelect extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleSelect = item => {
      this.props.onChange(item);
    }, this.handlePortalOutsideClick = event => {
      if (!this._rootNode.contains(event.target)) {
        this.props.onClose();
      }
    }, this.handleArrowClick = () => {
      var _props = this.props;
      const isOpen = _props.isOpen,
            onOpen = _props.onOpen,
            onClose = _props.onClose;

      if (isOpen) {
        onClose();
      } else {
        onOpen();
      }
    }, this.handleArrowKeyPress = event => {
      if (event.key === 'Enter') {
        this.handleArrowClick();
      }
    }, this.handleInputChange = event => {
      this.props.onInputChange(event.target.value);
    }, this.handleKeyDown = event => {
      var _props2 = this.props;
      const items = _props2.items,
            highlightIndex = _props2.highlightIndex,
            onHighlightIndexChange = _props2.onHighlightIndexChange,
            isOpen = _props2.isOpen,
            onOpen = _props2.onOpen;


      if (event.key === 'ArrowDown' && !isOpen) {
        onOpen();
      }

      if (!items || items.length === 0) {
        return;
      }

      const lastIndex = items.length - 1;
      if (event.key === 'ArrowUp') {
        event.preventDefault();
        const nextIndex = highlightIndex - 1;
        onHighlightIndexChange(nextIndex < 0 ? lastIndex : nextIndex);
      }
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        if (!isOpen) {
          onOpen();
        }
        const nextIndex = highlightIndex + 1;
        onHighlightIndexChange(nextIndex > lastIndex ? 0 : nextIndex);
      }
    }, this.handleKeyUp = event => {
      var _props3 = this.props;
      const items = _props3.items,
            onChange = _props3.onChange,
            highlightIndex = _props3.highlightIndex;

      if (event.key === 'Enter' && highlightIndex > -1 && items[highlightIndex]) {
        onChange(items[highlightIndex]);
      }
    }, this.setListElement = element => {
      this._listElement = element;
    }, this.setRootNode = node => {
      this._rootNode = node;
    }, this.setInput = input => {
      this._input = input;
    }, _temp;
  }

  focus() {
    this._input.focus();
  }

  render() {
    var _props4 = this.props;

    const onClear = _props4.onClear,
          placeholder = _props4.placeholder,
          isLoading = _props4.isLoading,
          value = _props4.value,
          items = _props4.items,
          renderItem = _props4.renderItem,
          isOpen = _props4.isOpen,
          highlightIndex = _props4.highlightIndex,
          isInputSelected = _props4.isInputSelected,
          inputValue = _props4.inputValue,
          onChange = _props4.onChange,
          onInputChange = _props4.onInputChange,
          onOpen = _props4.onOpen,
          onClose = _props4.onClose,
          onResize = _props4.onResize,
          dropdownPosition = _props4.dropdownPosition,
          disabled = _props4.disabled,
          onHighlightIndexChange = _props4.onHighlightIndexChange,
          openItemElement = _props4.openItemElement,
          readOnly = _props4.readOnly,
          rest = _objectWithoutProperties(_props4, ['onClear', 'placeholder', 'isLoading', 'value', 'items', 'renderItem', 'isOpen', 'highlightIndex', 'isInputSelected', 'inputValue', 'onChange', 'onInputChange', 'onOpen', 'onClose', 'onResize', 'dropdownPosition', 'disabled', 'onHighlightIndexChange', 'openItemElement', 'readOnly']);

    return _react2.default.createElement(
      'div',
      { ref: this.setRootNode },
      _react2.default.createElement(
        'div',
        { className: disabled ? _searchableStyle2.default.selectContainerDisabled : _searchableStyle2.default.selectContainer },
        _react2.default.createElement(_default2.default, _extends({}, rest, {
          className: _searchableStyle2.default.select,
          placeholder: placeholder,
          onChange: this.handleInputChange,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          value: inputValue || '',
          selected: isInputSelected,
          disabled: disabled,
          ref: this.setInput,
          readOnly: readOnly
        })),
        _react2.default.createElement(
          'div',
          { className: _searchableStyle2.default.functions },
          openItemElement && value && _react2.default.createElement(
            'span',
            { className: _searchableStyle2.default.openItem },
            openItemElement(value)
          ),
          onClear && value && !readOnly && _react2.default.createElement(
            'button',
            { type: 'button', className: _searchableStyle2.default.clearButton, onClick: onClear },
            _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
          ),
          !isLoading && !readOnly && _react2.default.createElement(
            'div',
            {
              className: _searchableStyle2.default.arrow,
              onClick: disabled ? null : this.handleArrowClick,
              tabIndex: 0,
              onKeyPress: disabled ? null : this.handleArrowKeyPress
            },
            _react2.default.createElement(_angleDownIcon2.default, { color: 'inherit' })
          ),
          isLoading && _react2.default.createElement(_spinner2.default, null)
        )
      ),
      _react2.default.createElement(
        'div',
        { className: _searchableStyle2.default.stickyContainer, style: { width: `${this.props.width}px` } },
        isOpen && _react2.default.createElement(
          _sticky2.default,
          {
            isOpen: isOpen,
            onResize: onResize,
            onlyBottomSpace: false,
            useOverlay: false,
            addPadding: false,
            scrollIntoView: false
          },
          _react2.default.createElement(
            _Stacked2.default,
            null,
            isActive => _react2.default.createElement(
              _CaptureOutsideClicks2.default,
              { onClickOutside: isActive ? onClose : null },
              _react2.default.createElement(_Escapable2.default, { onEscape: event => (isActive || event.shiftKey) && onClose() }),
              _react2.default.createElement(
                'div',
                {
                  className: `
                        ${isOpen ? _searchableStyle2.default.listContainer : _searchableStyle2.default.listContainerHidden}
                        ${dropdownPosition === 'top' ? _searchableStyle2.default.listContainerTop : _searchableStyle2.default.listContainerBottom}
                        ${items.length === 0 ? _searchableStyle2.default.listContainerEmpty : ''}
                      `,
                  style: { width: `${this.props.width}px` },
                  ref: this.setListElement
                },
                items.length === 0 && !isLoading && _react2.default.createElement(
                  'p',
                  { className: _searchableStyle2.default.noResultText },
                  'No results'
                ),
                items.length === 0 && isLoading && _react2.default.createElement(
                  'div',
                  { className: _searchableStyle2.default.listSpinner },
                  _react2.default.createElement(_spinner2.default, { message: 'Loading items\u2026' })
                ),
                items.length > 0 && _react2.default.createElement(_SelectMenu2.default, {
                  items: items,
                  value: value,
                  onSelect: this.handleSelect,
                  renderItem: renderItem,
                  highlightIndex: highlightIndex
                })
              )
            )
          )
        )
      )
    );
  }
}
exports.default = StatelessSearchableSelect;
StatelessSearchableSelect.propTypes = {
  onChange: _propTypes2.default.func,
  value: _propTypes2.default.any,
  inputValue: _propTypes2.default.string,
  onInputChange: _propTypes2.default.func,
  onClear: _propTypes2.default.func,
  renderItem: _propTypes2.default.func,
  placeholder: _propTypes2.default.string,
  isLoading: _propTypes2.default.bool,
  isOpen: _propTypes2.default.bool,
  onOpen: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  onResize: _propTypes2.default.func,
  openItemElement: _propTypes2.default.func,
  items: _propTypes2.default.array,
  highlightIndex: _propTypes2.default.number,
  onHighlightIndexChange: _propTypes2.default.func,
  isInputSelected: _propTypes2.default.bool,
  width: _propTypes2.default.number,
  disabled: _propTypes2.default.bool,
  dropdownPosition: _propTypes2.default.string,
  readOnly: _propTypes2.default.bool
};
StatelessSearchableSelect.defaultProps = {
  onChange: noop,
  onOpen: noop,
  onClose: noop,
  onInputChange: noop,
  isLoading: false,
  readOnly: false,
  renderItem: item => item,
  items: [],
  width: 100,
  dropdownPosition: 'bottom'
};