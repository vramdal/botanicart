'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Sticky = require('./styles/Sticky.css');

var _Sticky2 = _interopRequireDefault(_Sticky);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

var _easeComponent = require('ease-component');

var _easeComponent2 = _interopRequireDefault(_easeComponent);

var _scroll = require('scroll');

var _scroll2 = _interopRequireDefault(_scroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const scrollOptions = {
  duration: 200,
  ease: _easeComponent2.default.easeInOutQuart
}; /* global window, document */


const PADDING = 50;
const PADDING_DUMMY_TRANSITION = 'height 0.2s linear';

class Sticky extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      portalIsOpen: false,
      availableSpaceTop: 0,
      contentTop: 0,
      contentLeft: 0
    }, this._elementResizeDetector = (0, _elementResizeDetector2.default)({ strategy: 'scroll' }), this._containerScrollTop = 0, this._initialScrollTop = 0, this._isScrolling = false, this._rootTop = 0, this._rootLeft = 0, this._scrollContainerLeft = 0, this._scrollContainerWidth = 0, this.handlePortalOpened = () => {
      this.moveIntoPosition();
      this.addMovingListeners();
      this.handleWindowResize();
      this.appendPadding();
    }, this.handleContainerScroll = () => {
      this._containerScrollTop = this._scrollContainerElement.scrollTop;
      this.moveIntoPosition();
    }, this.scrollBack = () => {
      if (this._scrollContainerElement && this._initialScrollTop) {
        this._isScrolling = true;
        _scroll2.default.top(this._scrollContainerElement, this._initialScrollTop, scrollOptions, () => {
          this._isScrolling = false;
        });
      }
    }, this.scrollIntoView = () => {
      if (!this.props.scrollIntoView) {
        return;
      }
      if (!this._scrollContainerElement) {
        return;
      }

      if (!this._contentElement) {
        return;
      }

      const neededHeight = this.props.wantedHeight || this._contentElement.offsetHeight;

      if (this.props.addPadding && neededHeight) {
        const extraHeight = Math.min(this._contentElement.offsetHeight, window.innerHeight);
        this._paddingDummy.style.height = `${extraHeight}px`;
      }

      const scrollTop = this._scrollContainerElement.scrollTop;

      const scrollContainerHeight = this._scrollContainerElement.offsetHeight;

      if (this._rootTop + neededHeight > scrollContainerHeight) {
        this._extraScrollTop = -window.innerHeight + neededHeight + this._rootTop;

        this._initialScrollTop = scrollTop;
        this._isScrolling = true;
        const newScrollTop = scrollTop + this._extraScrollTop + PADDING;

        _scroll2.default.top(this._scrollContainerElement, newScrollTop, scrollOptions, () => {
          this._isScrolling = false;
          this.props.onResize({
            isScrolling: this._isScrolling
          });
        });
      }
    }, this.addMovingListeners = () => {
      if (this._elementResizeDetector && this._contentElement && this._contentElement.firstChild) {
        this._elementResizeDetector.listenTo(this._contentElement.firstChild, this.handleElementResize);
      }
    }, this.handleWindowResize = (0, _throttle3.default)(() => {
      this.moveIntoPosition();
    }, 1000 / 60), this.handleWindowScroll = (0, _throttle3.default)(() => {
      this.moveIntoPosition();
    }, 1000 / 60), this.appendPadding = () => {
      if (this.props.addPadding && !this._paddingDummy && this._contentElement) {
        this._paddingDummy = document.createElement('div');
        this._paddingDummy.style.clear = 'both';
        this._paddingDummy.style.height = 0;
        this._paddingDummy.style.transition = PADDING_DUMMY_TRANSITION;
        if (this._scrollContainerElement) {
          this._scrollContainerElement.appendChild(this._paddingDummy);
        }
      }
      this.scrollIntoView();
    }, this.setScrollContainerElement = element => {
      if (!element) {
        return;
      }
      this._scrollContainerElement = element;

      this.setState({
        portalIsOpen: true
      });
    }, this.stickToRoot = () => {
      var _props = this.props;
      const stickToTop = _props.stickToTop,
            onlyBottomSpace = _props.onlyBottomSpace;

      this.setRootRects();
      const newState = {};
      if (onlyBottomSpace) {
        if (this._rootTop < 0 && stickToTop) {
          newState.availableSpaceTop = 0;
        } else {
          newState.availableSpaceTop = this._rootTop;
        }
        newState.contentTop = 0;
        newState.contentLeft = 0;
      } else {
        newState.availableSpaceTop = 0;
        newState.contentTop = this._rootTop;
        newState.contentLeft = this._rootLeft;
      }
      newState.availableSpaceLeft = 0;
      this.setState(newState);
      this.resizeAvailableSpace();
    }, this.moveIntoPosition = () => {
      this.stickToRoot();

      this.props.onResize({
        rootLeft: this._rootLeft,
        rootTop: this._rootTop,
        containerWidth: this._scrollContainerWidth,
        containerLeft: this._scrollContainerLeft,
        availableWidth: this.state.availableWidth || window.innerWidth,
        availableHeight: this.state.availableHeight || window.innerHeight,
        isScrolling: this._isScrolling
      });
    }, this.handleElementResize = el => {
      this.moveIntoPosition();
    }, this.setAvailableSpaceElement = element => {
      this._availableSpaceElement = element;
    }, this.setRootElement = element => {
      this._rootElement = element;
    }, this.setContentElement = element => {
      this._contentElement = element;
    }, _temp;
  }

  // Root positions


  // ScrollContainer positions


  componentDidMount() {
    const getScrollContainer = this.context.getScrollContainer;

    const scrollContainer = typeof getScrollContainer === 'function' && getScrollContainer() || document.body;
    this.setScrollContainerElement(scrollContainer);

    if (window) {
      window.addEventListener('resize', this.handleWindowResize);
      window.addEventListener('scroll', this.handleWindowScroll, { passive: true, capture: true });
    }
  }

  componentWillUnmount() {
    this.scrollBack();

    if (this._paddingDummy) {
      this._paddingDummy.style.height = '0';
    }
    if (window) {
      window.removeEventListener('resize', this.handleWindowResize);
      window.removeEventListener('scroll', this.handleWindowScroll, { passive: true, capture: true });
    }

    if (this._scrollContainerElement) {
      this._scrollContainerElement.removeEventListener('scroll', this.handleContainerScroll, { passive: true });
    }

    if (this._elementResizeDetector && this._contentElement && this._contentElement.firstChild) {
      this._elementResizeDetector.uninstall(this._contentElement.firstChild);
    }

    if (this._paddingDummy) {
      this._paddingDummy.removeEventListener('transitionend', () => {
        this._paddingDummy.remove();
      }, false);
    }
  }

  componentDidUpdate(prevProps) {
    if (prevProps.onlyBottomSpace !== this.props.onlyBottomSpace) {
      this.moveIntoPosition();
    }
    if (prevProps.wantedHeight !== this.props.wantedHeight) {
      this.scrollIntoView();
    }
    if (prevProps.stickToTop !== this.props.stickToTop) {
      this.moveIntoPosition();
    }
  }

  setRootRects() {
    if (!this._rootElement) {
      return;
    }

    var _rootElement$getBound = this._rootElement.getBoundingClientRect();

    const top = _rootElement$getBound.top,
          left = _rootElement$getBound.left;

    this._rootTop = top;
    this._rootLeft = left;
  }

  resizeAvailableSpace() {
    var _props2 = this.props;
    const stickToTop = _props2.stickToTop,
          onlyBottomSpace = _props2.onlyBottomSpace;

    const availableWidth = window.innerWidth;

    let availableHeight = window.innerHeight;

    if (onlyBottomSpace) {
      availableHeight = window.innerHeight - this._rootTop;
      if (this._rootTop < 0 && stickToTop) {
        availableHeight = window.innerHeight;
      }
    }

    this.setState({
      availableWidth: availableWidth,
      availableHeight: availableHeight
    });
    this.setRootRects();
  }

  // Set elements


  render() {
    var _props3 = this.props;
    const useOverlay = _props3.useOverlay,
          children = _props3.children,
          isOpen = _props3.isOpen;
    var _state = this.state;
    const availableSpaceTop = _state.availableSpaceTop,
          availableWidth = _state.availableWidth,
          availableHeight = _state.availableHeight,
          contentTop = _state.contentTop,
          contentLeft = _state.contentLeft,
          portalIsOpen = _state.portalIsOpen;


    return _react2.default.createElement(
      'span',
      { ref: this.setRootElement, className: _Sticky2.default.root },
      _react2.default.createElement(
        _reactPortal2.default,
        {
          isOpened: isOpen && portalIsOpen,
          closeOnEsc: false,
          onOpen: this.handlePortalOpened,
          className: _Sticky2.default.portal
        },
        _react2.default.createElement(
          'div',
          { className: _Sticky2.default.portalInner },
          useOverlay && _react2.default.createElement('div', { className: _Sticky2.default.overlay }),
          _react2.default.createElement(
            'div',
            {
              className: _Sticky2.default.availableSpace,
              ref: this.setAvailableSpaceElement,
              style: {
                top: `${availableSpaceTop}px`,
                width: `${availableWidth}px`,
                height: `${availableHeight}px`
              }
            },
            _react2.default.createElement(
              'div',
              {
                className: _Sticky2.default.content,
                ref: this.setContentElement,
                style: {
                  top: `${contentTop}px`,
                  left: `${contentLeft}px`
                }
              },
              children
            )
          )
        )
      )
    );
  }
}
exports.default = Sticky;
Sticky.propTypes = {
  children: _propTypes2.default.node.isRequired,
  isOpen: _propTypes2.default.bool,
  onlyBottomSpace: _propTypes2.default.bool,
  stickToTop: _propTypes2.default.bool,
  onResize: _propTypes2.default.func,
  useOverlay: _propTypes2.default.bool,
  scrollIntoView: _propTypes2.default.bool,
  addPadding: _propTypes2.default.bool,
  wantedHeight: _propTypes2.default.number,
  scrollContainer: _propTypes2.default.object // DOM element
};
Sticky.defaultProps = {
  scrollContainer: undefined,
  stickToTop: false,
  onlyBottomSpace: true,
  isOpen: true,
  useOverlay: true,
  scrollIntoView: true,
  addPadding: true,
  onResize: () => {}
};
Sticky.contextTypes = {
  getScrollContainer: _propTypes2.default.func
};