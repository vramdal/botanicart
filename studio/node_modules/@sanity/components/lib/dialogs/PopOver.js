'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _PopOver = require('./styles/PopOver.css');

var _PopOver2 = _interopRequireDefault(_PopOver);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _sticky = require('part:@sanity/components/portal/sticky');

var _sticky2 = _interopRequireDefault(_sticky);

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PADDING = 20;

class PopOver extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      arrowLeft: 0,
      popoverLeft: 0
    }, this.handleClose = () => {
      this.props.onClose();
    }, this.setArrowElement = element => {
      this._arrowElement = element;
    }, this.setContentElement = element => {
      this._contentElement = element;
    }, this.setPopoverInnerElement = element => {
      this._popOverInnerElement = element;
    }, this.setRootElement = element => {
      this._rootElement = element;
    }, this.handlePortalResize = dimensions => {
      if (!this._popOverInnerElement) {
        return;
      }

      const rootLeft = dimensions.rootLeft,
            availableHeight = dimensions.availableHeight,
            availableWidth = dimensions.availableWidth;


      const width = this._popOverInnerElement.offsetWidth;

      let popoverLeft = rootLeft - width / 2;

      if (availableWidth < rootLeft + width / 2) {
        popoverLeft = availableWidth - width - PADDING;
      }

      this.setState({
        popoverLeft: popoverLeft,
        availableHeight: availableHeight,
        arrowLeft: rootLeft
      });
    }, _temp;
  }

  render() {
    var _props = this.props;
    const children = _props.children,
          isOpen = _props.isOpen,
          onClose = _props.onClose,
          color = _props.color,
          useOverlay = _props.useOverlay;
    var _state = this.state;
    const popoverLeft = _state.popoverLeft,
          arrowLeft = _state.arrowLeft,
          availableHeight = _state.availableHeight;


    return _react2.default.createElement(
      'div',
      { style: { display: 'span' }, ref: this.setRootElement },
      _react2.default.createElement(
        _sticky2.default,
        {
          isOpen: isOpen,
          onResize: this.handlePortalResize,
          useOverlay: useOverlay
        },
        _react2.default.createElement(
          _Stacked2.default,
          null,
          isActive => _react2.default.createElement(
            'div',
            {
              ref: this.setPopoverInnerElement,
              className: `
                  ${_PopOver2.default.root}
                  ${color === 'danger' ? _PopOver2.default.colorDanger : ''}
                  ${color === 'warning' ? _PopOver2.default.colorWarning : ''}
                  ${color === 'info' ? _PopOver2.default.colorInfo : ''}
                  ${color === 'success' ? _PopOver2.default.colorSuccess : ''}
                `
            },
            _react2.default.createElement('div', {
              className: _PopOver2.default.arrow,
              ref: this.setArrowElement,
              style: {
                left: `${arrowLeft}px`
              }
            }),
            _react2.default.createElement(_Escapable2.default, { onEscape: event => (isActive || event.shiftKey) && onClose() }),
            _react2.default.createElement(
              _CaptureOutsideClicks2.default,
              { onClickOutside: isActive ? onClose : null },
              _react2.default.createElement(
                'div',
                {
                  className: _PopOver2.default.popover,
                  style: {
                    left: `${popoverLeft}px`
                  }
                },
                _react2.default.createElement(
                  'button',
                  { className: _PopOver2.default.close, type: 'button', onClick: onClose },
                  _react2.default.createElement(_closeIcon2.default, null)
                ),
                _react2.default.createElement(
                  'div',
                  {
                    ref: this.setContentElement,
                    className: _PopOver2.default.content,
                    style: {
                      maxHeight: `${availableHeight - PADDING}px`
                    }
                  },
                  children
                )
              )
            )
          )
        )
      )
    );
  }
}
exports.default = PopOver;
PopOver.propTypes = {
  children: _propTypes2.default.node.isRequired,
  onClose: _propTypes2.default.func,
  isOpen: _propTypes2.default.bool,
  color: _propTypes2.default.oneOf(['default', 'danger', 'success', 'warning', 'info']),
  useOverlay: _propTypes2.default.bool
};
PopOver.defaultProps = {
  color: 'default',
  onClose() {}, // eslint-disable-line
  isOpen: true,
  useOverlay: true
};