'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _defaultStyle = require('part:@sanity/components/dialogs/default-style');

var _defaultStyle2 = _interopRequireDefault(_defaultStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DefaultDialog extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleDialogClick = event => {
      event.stopPropagation();
    }, this.setDialogElement = element => {
      this.dialog = element;
    }, this.renderActions = actions => {
      if (!actions || actions.length < 1) {
        return undefined;
      }

      return _react2.default.createElement(
        'div',
        { className: _defaultStyle2.default.actions },
        actions.map((action, i) => {
          return _react2.default.createElement(
            _default2.default,
            {
              key: i,
              onClick: () => this.props.onAction(action),
              'data-action-index': i,
              color: action.color,
              disabled: action.disabled,
              kind: action.kind,
              autoFocus: action.autoFocus,
              className: action.secondary ? _defaultStyle2.default.actionSecondary : ''
            },
            action.title
          );
        })
      );
    }, _temp;
  }

  componentDidUpdate(prevProps) {
    const isOpen = this.props.isOpen;
    const wasOpen = prevProps.isOpen;
    if (!wasOpen && isOpen) {
      this.openDialogElement();
    } else if (wasOpen && !isOpen) {
      this.closeDialogElement();
    }
  }

  openDialogElement() {
    this.props.onOpen();
  }

  render() {
    var _props = this.props;
    const title = _props.title,
          actions = _props.actions,
          isOpen = _props.isOpen,
          showHeader = _props.showHeader,
          kind = _props.kind,
          onClose = _props.onClose,
          className = _props.className,
          showCloseButton = _props.showCloseButton;

    const classNames = `
      ${_defaultStyle2.default[kind]}
      ${isOpen ? _defaultStyle2.default.isOpen : _defaultStyle2.default.isClosed}
      ${showHeader ? _defaultStyle2.default.hasHeader : ''}
      ${actions && actions.length > 0 ? _defaultStyle2.default.hasFunctions : ''}
      ${className}
    `;

    return _react2.default.createElement(
      _Stacked2.default,
      null,
      isActive => _react2.default.createElement(
        _reactPortal2.default,
        { isOpened: isOpen },
        _react2.default.createElement(
          'div',
          { className: classNames, ref: this.setDialogElement },
          _react2.default.createElement(
            'div',
            { className: _defaultStyle2.default.dialog },
            _react2.default.createElement(_Escapable2.default, { onEscape: event => (isActive || event.shiftKey) && onClose() }),
            _react2.default.createElement(
              _CaptureOutsideClicks2.default,
              { onClickOutside: isActive ? onClose : undefined },
              _react2.default.createElement(
                'div',
                { className: _defaultStyle2.default.inner },
                !showHeader && onClose && showCloseButton && _react2.default.createElement(
                  'button',
                  { className: _defaultStyle2.default.closeButtonOutside, onClick: onClose },
                  _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
                ),
                showHeader && onClose && title && _react2.default.createElement(
                  'div',
                  { className: _defaultStyle2.default.header },
                  _react2.default.createElement(
                    'h1',
                    { className: _defaultStyle2.default.title },
                    title
                  ),
                  _react2.default.createElement(
                    'button',
                    { className: _defaultStyle2.default.closeButton, onClick: onClose },
                    _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: _defaultStyle2.default.content },
                  this.props.children
                ),
                actions && actions.length > 0 && _react2.default.createElement(
                  'div',
                  { className: _defaultStyle2.default.footer },
                  this.renderActions(actions)
                )
              )
            )
          )
        )
      )
    );
  }
}
exports.default = DefaultDialog;
DefaultDialog.propTypes = {
  kind: _propTypes2.default.oneOf(['default', 'warning', 'success', 'danger', 'info']),
  className: _propTypes2.default.string,
  title: _propTypes2.default.string,
  children: _propTypes2.default.node,
  onOpen: _propTypes2.default.func,
  onClose: _propTypes2.default.func.isRequired,
  isOpen: _propTypes2.default.bool,
  onAction: _propTypes2.default.func,
  showHeader: _propTypes2.default.bool,
  showCloseButton: _propTypes2.default.bool,
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string.isRequired,
    tooltip: _propTypes2.default.string,
    kind: _propTypes2.default.string,
    autoFocus: _propTypes2.default.bool
  }))
};
DefaultDialog.defaultProps = {
  isOpen: false,
  showHeader: false,
  showCloseButton: true,
  onAction() {},
  onOpen() {},
  actions: [],
  kind: 'default'
};