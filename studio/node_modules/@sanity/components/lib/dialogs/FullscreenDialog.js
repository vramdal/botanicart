'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fullscreenStyle = require('part:@sanity/components/dialogs/fullscreen-style');

var _fullscreenStyle2 = _interopRequireDefault(_fullscreenStyle);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

var _StackedEscapable = require('../utilities/StackedEscapable');

var _StackedEscapable2 = _interopRequireDefault(_StackedEscapable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FullScreenDialog extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleActionClick = event => {
      const actionIndex = event.currentTarget.getAttribute('data-action-index');
      this.props.onAction(this.props.actions[actionIndex]);
    }, _temp;
  }

  render() {
    var _props = this.props;
    const color = _props.color,
          title = _props.title,
          className = _props.className,
          onClose = _props.onClose,
          centered = _props.centered,
          isOpen = _props.isOpen,
          actions = _props.actions;


    const classNames = [_fullscreenStyle2.default[color] || _fullscreenStyle2.default.default, isOpen ? _fullscreenStyle2.default.isOpen : _fullscreenStyle2.default.isClosed, className, centered && _fullscreenStyle2.default.centered].filter(Boolean).join(' ');

    return _react2.default.createElement(
      _StackedEscapable2.default,
      { onEscape: onClose },
      _react2.default.createElement(
        _reactPortal2.default,
        { isOpened: isOpen },
        _react2.default.createElement(
          'div',
          { className: classNames },
          onClose && _react2.default.createElement(
            'button',
            { className: _fullscreenStyle2.default.closeButton, onClick: onClose },
            _react2.default.createElement(_closeIcon2.default, { color: 'inherit' })
          ),
          _react2.default.createElement(
            'div',
            { className: _fullscreenStyle2.default.inner },
            _react2.default.createElement(
              'h1',
              { className: _fullscreenStyle2.default.heading },
              title
            ),
            _react2.default.createElement(
              'div',
              { className: _fullscreenStyle2.default.content },
              this.props.children,
              _react2.default.createElement(
                'div',
                { className: _fullscreenStyle2.default.actionsWrapper },
                actions.length > 0 && _react2.default.createElement(
                  'div',
                  { className: _fullscreenStyle2.default.actions },
                  actions.map((action, i) => {
                    return _react2.default.createElement(
                      'div',
                      { key: i },
                      _react2.default.createElement(
                        _default2.default,
                        {
                          onClick: this.handleActionClick,
                          'data-action-index': i,
                          color: color === 'default' ? action.color : 'white',
                          disabled: action.disabled,
                          inverted: typeof action.inverted === 'boolean' ? action.inverted : true,
                          kind: action.kind,
                          autoFocus: action.autoFocus,
                          className: `
                                    ${_fullscreenStyle2.default.button}
                                    ${_fullscreenStyle2.default[`button_${action.kind}`] || _fullscreenStyle2.default.button}
                                  `
                        },
                        action.title
                      )
                    );
                  })
                )
              )
            )
          )
        )
      )
    );
  }
}
exports.default = FullScreenDialog;
FullScreenDialog.propTypes = {
  color: _propTypes2.default.oneOf(['default', 'warning', 'info', 'success', 'danger']),
  className: _propTypes2.default.string,
  title: _propTypes2.default.string,
  children: _propTypes2.default.node,
  onClose: _propTypes2.default.func,
  isOpen: _propTypes2.default.bool,
  centered: _propTypes2.default.bool,
  onAction: _propTypes2.default.func,
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    title: _propTypes2.default.string.isRequired,
    tooltip: _propTypes2.default.string,
    kind: _propTypes2.default.string,
    autoFocus: _propTypes2.default.bool
  }))
};
FullScreenDialog.defaultProps = {
  color: 'default',
  isOpen: false,
  showHeader: false,
  onAction() {},
  onOpen() {},
  onClose() {},
  actions: []
};