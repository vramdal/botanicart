'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _dataAspects = require('./utils/dataAspects');

var _dataAspects2 = _interopRequireDefault(_dataAspects);

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _SchemaPaneResolver = require('./styles/SchemaPaneResolver.css');

var _SchemaPaneResolver2 = _interopRequireDefault(_SchemaPaneResolver);

var _TypePane = require('./pane/TypePane');

var _TypePane2 = _interopRequireDefault(_TypePane);

var _DocumentsPane = require('./pane/DocumentsPane');

var _DocumentsPane2 = _interopRequireDefault(_DocumentsPane);

var _EditorWrapper = require('./pane/EditorWrapper');

var _EditorWrapper2 = _interopRequireDefault(_EditorWrapper);

var _GetStarted = require('./GetStarted');

var _GetStarted2 = _interopRequireDefault(_GetStarted);

var _splitController = require('part:@sanity/components/panes/split-controller');

var _splitController2 = _interopRequireDefault(_splitController);

var _splitPaneWrapper = require('part:@sanity/components/panes/split-pane-wrapper');

var _splitPaneWrapper2 = _interopRequireDefault(_splitPaneWrapper);

var _default = require('part:@sanity/components/snackbar/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TYPE_ITEMS = _dataAspects2.default.getInferredTypes().map(typeName => ({
  key: typeName,
  name: typeName,
  title: _dataAspects2.default.getDisplayName(typeName)
}));

class SchemaPaneResolver extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      collapsedPanes: []
    }, this.handleToggleDocumentsPaneMenu = () => {
      this.setState({
        documentPaneMenuIsOpen: !this.state.documentPaneMenuIsOpen
      });
    }, this.handleCloseDocumentsPaneMenu = () => {
      this.setState({
        documentPaneMenuIsOpen: false
      });
    }, this.handleShouldCollapse = pane => {
      const collapsedPanes = this.state.collapsedPanes;
      collapsedPanes.push(pane.props.paneId);
      this.setState({
        collapsedPanes: collapsedPanes
      });
    }, this.handleShouldExpand = pane => {
      this.setState({
        collapsedPanes: this.state.collapsedPanes.filter(p => p !== pane.props.paneId) //eslint-disable-line id-length
      });
    }, _temp;
  }

  componentWillReceiveProps(nextProps) {
    const nextType = nextProps.router.state && nextProps.router.state.selectedType;
    const currentType = this.props.router.state && this.props.router.state.selectedType;
    if (nextType !== currentType) {
      this.setState({
        collapsedPanes: []
      });
    }
  }

  render() {
    const router = this.props.router;
    const collapsedPanes = this.state.collapsedPanes;
    var _router$state = router.state;
    const selectedType = _router$state.selectedType,
          selectedDocumentId = _router$state.selectedDocumentId,
          action = _router$state.action;

    const schemaType = _schema2.default.get(router.state.selectedType);

    if (TYPE_ITEMS.length === 0) {
      return _react2.default.createElement(_GetStarted2.default, null);
    }

    return _react2.default.createElement(
      'div',
      { className: _SchemaPaneResolver2.default.container },
      _react2.default.createElement(
        _splitController2.default,
        {
          onSholdCollapse: this.handleShouldCollapse,
          onSholdExpand: this.handleShouldExpand
        },
        _react2.default.createElement(
          _splitPaneWrapper2.default,
          {
            defaultWidth: 200,
            minWidth: 100,
            paneId: 'typePane',
            isCollapsed: !!collapsedPanes.find(pane => pane === 'typePane')
          },
          _react2.default.createElement(_TypePane2.default, {
            isCollapsed: !!collapsedPanes.find(pane => pane === 'typePane'),
            title: 'Content',
            paneId: 'typePane',
            items: TYPE_ITEMS,
            router: router,
            onExpand: this.handleShouldExpand,
            onCollapse: this.handleShouldCollapse
          })
        ),
        schemaType && selectedType && _react2.default.createElement(
          _splitPaneWrapper2.default,
          {
            defaultWidth: 300,
            minWidth: 100,
            maxWidth: 400,
            paneId: 'documentsPane',
            isCollapsed: !!collapsedPanes.find(pane => pane === 'documentsPane')
          },
          _react2.default.createElement(_DocumentsPane2.default, {
            key: selectedType,
            isCollapsed: !!collapsedPanes.find(pane => pane === 'documentsPane'),
            selectedType: selectedType,
            title: _dataAspects2.default.getDisplayName(selectedType) || 'Untitled',
            selectedDocumentId: selectedDocumentId,
            schemaType: schemaType,
            router: router,
            paneId: 'documentsPane',
            onExpand: this.handleShouldExpand,
            onCollapse: this.handleShouldCollapse
          })
        ),
        !schemaType && !selectedType && _react2.default.createElement(
          _splitPaneWrapper2.default,
          null,
          _react2.default.createElement(
            'div',
            { className: _SchemaPaneResolver2.default.selectContentType },
            'Select content type'
          )
        ),
        schemaType && selectedDocumentId && action === 'edit' && _react2.default.createElement(
          _splitPaneWrapper2.default,
          null,
          _react2.default.createElement(_EditorWrapper2.default, {
            key: selectedDocumentId,
            documentId: selectedDocumentId,
            typeName: schemaType.name,
            schemaType: schemaType
          })
        ),
        selectedType && !schemaType && _react2.default.createElement(
          _splitPaneWrapper2.default,
          null,
          _react2.default.createElement(
            'h2',
            { className: _SchemaPaneResolver2.default.emptyText },
            'Could not find any type named ',
            _react2.default.createElement(
              'strong',
              null,
              _react2.default.createElement(
                'em',
                null,
                selectedType
              )
            ),
            ' in schema ',
            _react2.default.createElement(
              'strong',
              null,
              _react2.default.createElement(
                'em',
                null,
                _schema2.default.name
              )
            ),
            '\u2026'
          )
        )
      ),
      selectedType && schemaType && action && action !== 'edit' &&
      // this would normally never happen
      _react2.default.createElement(
        _default2.default,
        { kind: 'error' },
        'Invalid action: ',
        action
      )
    );
  }
}
exports.default = SchemaPaneResolver;
SchemaPaneResolver.propTypes = {
  router: _propTypes2.default.shape({
    state: _propTypes2.default.object
  }).isRequired
};