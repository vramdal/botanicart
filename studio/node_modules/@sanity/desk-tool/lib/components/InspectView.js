'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./styles/JSONInspector.css');

var _InspectView = require('./styles/InspectView.css');

var _InspectView2 = _interopRequireDefault(_InspectView);

var _reactJsonInspector = require('react-json-inspector');

var _reactJsonInspector2 = _interopRequireDefault(_reactJsonInspector);

var _default = require('part:@sanity/components/dialogs/default');

var _default2 = _interopRequireDefault(_default);

var _buttons = require('part:@sanity/components/toggles/buttons');

var _buttons2 = _interopRequireDefault(_buttons);

var _hashlru = require('hashlru');

var _hashlru2 = _interopRequireDefault(_hashlru);

var _draftUtils = require('../utils/draftUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const lru = (0, _hashlru2.default)(1000);

function isExpanded(keyPath, value) {
  const cached = lru.get(keyPath);
  if (cached === undefined) {
    lru.set(keyPath, Array.isArray(value) || (0, _isObject3.default)(value));
    return isExpanded(keyPath, value);
  }
  return cached;
}

function toggleExpanded(event) {
  const path = event.path;

  const current = lru.get(path);
  if (current === undefined) {
    // something is wrong
    return;
  }
  lru.set(path, !current);
}

function selectElement(element) {
  const sel = window.getSelection();
  sel.removeAllRanges();
  const range = document.createRange();
  range.selectNodeContents(element);
  sel.addRange(range);
}

function select(event) {
  selectElement(event.currentTarget);
}

function maybeSelectAll(event) {
  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey);
  if (!selectAll) {
    return;
  }
  event.preventDefault();
  selectElement(event.currentTarget);
}

const VIEW_MODE_PARSED = { value: 'parsed', title: 'Parsed' };
const VIEW_MODE_RAW = { value: 'raw', title: 'Raw' };

const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW];

const VIEW_MODE_LS_KEY = 'desk-tool-inspect-view-preferred-view-mode';

function getPreferredViewMode() {
  const preferredViewMode = localStorage.getItem(VIEW_MODE_LS_KEY);
  return preferredViewMode && VIEW_MODES.find(mode => mode.value === preferredViewMode);
}

class InspectView extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      viewMode: getPreferredViewMode() || VIEW_MODE_PARSED
    }, this.handleChangeViewMode = viewMode => {
      this.setState({ viewMode: viewMode });
      localStorage.setItem(VIEW_MODE_LS_KEY, viewMode.value);
    }, _temp;
  }

  render() {
    var _props = this.props;
    const value = _props.value,
          onClose = _props.onClose;
    const viewMode = this.state.viewMode;

    return _react2.default.createElement(
      _default2.default,
      {
        isOpen: true,
        showHeader: true,
        title: `Inspecting ${(0, _draftUtils.getPublishedId)(value._id)}`,
        className: _InspectView2.default.dialog,
        onClose: onClose
      },
      _react2.default.createElement(
        'div',
        { className: _InspectView2.default.content },
        _react2.default.createElement(
          'div',
          { style: { display: 'flex', justifyContent: 'flex-end' } },
          _react2.default.createElement(_buttons2.default, {
            value: viewMode,
            items: VIEW_MODES,
            onChange: this.handleChangeViewMode
          })
        ),
        viewMode === VIEW_MODE_PARSED && _react2.default.createElement(_reactJsonInspector2.default, {
          isExpanded: isExpanded,
          onClick: toggleExpanded,
          data: value
        }),
        viewMode === VIEW_MODE_RAW && _react2.default.createElement(
          'pre',
          {
            className: _InspectView2.default.raw,
            tabIndex: 0,
            onKeyDown: maybeSelectAll,
            onDoubleClick: select,
            onFocus: select
          },
          JSON.stringify(value, null, 2)
        )
      )
    );
  }
}

exports.default = InspectView;
InspectView.propTypes = {
  value: _propTypes2.default.object,
  onClose: _propTypes2.default.func
};