'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class, _temp2;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTinyVirtualList = require('react-tiny-virtual-list');

var _reactTinyVirtualList2 = _interopRequireDefault(_reactTinyVirtualList);

var _enhanceWithAvailHeight = require('./enhanceWithAvailHeight');

var _enhanceWithAvailHeight2 = _interopRequireDefault(_enhanceWithAvailHeight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _enhanceWithAvailHeight2.default)((_temp2 = _class = class InfiniteList extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      triggerUpdate: 0,
      itemHeight: 56,
      itemSize: undefined
    }, this.getItemHeight = item => {
      return 56;
    }, this.setMeasureElement = element => {
      if (element && element.offsetHeight) {
        this.setState({
          itemSize: element.offsetHeight
        });
      }
    }, this.renderItem = ({ index, style }) => {
      var _props = this.props;
      const renderItem = _props.renderItem,
            getItemKey = _props.getItemKey,
            items = _props.items;

      const item = items[index];
      return _react2.default.createElement(
        'div',
        { key: getItemKey(item), style: style },
        renderItem(item, index)
      );
    }, _temp;
  }

  componentWillReceiveProps(prevProps) {

    if (prevProps.items !== this.props.items) {
      /* This is needed to break equality checks
       in VirtualList's sCU in cases where itemCount has not changed,
       but an elements has been removed or added
       */
      this.setState({ triggerUpdate: Math.random() });
    }

    if (prevProps.layout !== this.props.layout) {
      this.setState({
        itemSize: undefined
      });
    }
  }

  render() {
    var _props2 = this.props;
    const layout = _props2.layout,
          height = _props2.height,
          items = _props2.items,
          className = _props2.className,
          renderItem = _props2.renderItem;
    var _state = this.state;
    const triggerUpdate = _state.triggerUpdate,
          itemSize = _state.itemSize;


    if (!items || items.length === 0) {
      return _react2.default.createElement('div', null);
    }

    if (!itemSize && items) {
      return _react2.default.createElement(
        'div',
        { ref: this.setMeasureElement },
        renderItem(items[0], 0)
      );
    }

    return _react2.default.createElement(_reactTinyVirtualList2.default, {
      onScroll: this.props.onScroll,
      key: layout /* forcefully re-render the whole list when layout changes */,
      className: className || '',
      height: height,
      itemCount: items.length,
      itemSize: itemSize,
      renderItem: this.renderItem,
      overscanCount: 50,
      'data-trigger-update-hack': triggerUpdate /* see componentWillReceiveProps above */
    });
  }
}, _class.propTypes = {
  height: _propTypes2.default.number,
  items: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  renderItem: _propTypes2.default.func,
  className: _propTypes2.default.string,
  getItemKey: _propTypes2.default.func,
  layout: _propTypes2.default.oneOf(['default', 'detail', 'card', 'media']),
  onScroll: _propTypes2.default.func
}, _class.defaultProps = {
  layout: 'default',
  items: [],
  height: 250
}, _temp2));