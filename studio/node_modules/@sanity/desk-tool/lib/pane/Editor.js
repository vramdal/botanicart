'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2; /* eslint-disable complexity */

// Connects the FormBuilder with various sanity roles


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _formBuilder = require('part:@sanity/form-builder');

var _formBuilder2 = _interopRequireDefault(_formBuilder);

var _router = require('part:@sanity/base/router');

var _trashIcon = require('part:@sanity/base/trash-icon');

var _trashIcon2 = _interopRequireDefault(_trashIcon);

var _undoIcon = require('part:@sanity/base/undo-icon');

var _undoIcon2 = _interopRequireDefault(_undoIcon);

var _publicIcon = require('part:@sanity/base/public-icon');

var _publicIcon2 = _interopRequireDefault(_publicIcon);

var _visibilityOffIcon = require('part:@sanity/base/visibility-off-icon');

var _visibilityOffIcon2 = _interopRequireDefault(_visibilityOffIcon);

var _binaryIcon = require('part:@sanity/base/binary-icon');

var _binaryIcon2 = _interopRequireDefault(_binaryIcon);

var _default3 = require('part:@sanity/components/menus/default');

var _default4 = _interopRequireDefault(_default3);

var _contentCopyIcon = require('part:@sanity/base/content-copy-icon');

var _contentCopyIcon2 = _interopRequireDefault(_contentCopyIcon);

var _document = require('part:@sanity/base/datastore/document');

var _document2 = _interopRequireDefault(_document);

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _preview = require('part:@sanity/base/preview');

var _default5 = require('part:@sanity/components/panes/default');

var _default6 = _interopRequireDefault(_default5);

var _afterEditorComponent = require('all:part:@sanity/desk-tool/after-editor-component');

var _afterEditorComponent2 = _interopRequireDefault(_afterEditorComponent);

var _syncIcon = require('part:@sanity/base/sync-icon');

var _syncIcon2 = _interopRequireDefault(_syncIcon);

var _checkIcon = require('part:@sanity/base/check-icon');

var _checkIcon2 = _interopRequireDefault(_checkIcon);

var _default7 = require('part:@sanity/components/snackbar/default');

var _default8 = _interopRequireDefault(_default7);

var _resolveProductionUrl = require('part:@sanity/transitional/production-preview/resolve-production-url?');

var _resolveProductionUrl2 = _interopRequireDefault(_resolveProductionUrl);

var _list = require('part:@sanity/components/validation/list');

var _list2 = _interopRequireDefault(_list);

var _reactTippy = require('@sanity/react-tippy');

var _chevronDownIcon = require('part:@sanity/base/chevron-down-icon');

var _chevronDownIcon2 = _interopRequireDefault(_chevronDownIcon);

var _warningIcon = require('part:@sanity/base/warning-icon');

var _warningIcon2 = _interopRequireDefault(_warningIcon);

var _ConfirmPublish = require('../components/ConfirmPublish');

var _ConfirmPublish2 = _interopRequireDefault(_ConfirmPublish);

var _ConfirmDiscard = require('../components/ConfirmDiscard');

var _ConfirmDiscard2 = _interopRequireDefault(_ConfirmDiscard);

var _ConfirmDelete = require('../components/ConfirmDelete');

var _ConfirmDelete2 = _interopRequireDefault(_ConfirmDelete);

var _ConfirmUnpublish = require('../components/ConfirmUnpublish');

var _ConfirmUnpublish2 = _interopRequireDefault(_ConfirmUnpublish);

var _InspectView = require('../components/InspectView');

var _InspectView2 = _interopRequireDefault(_InspectView);

var _copyDocument = require('../utils/copyDocument');

var _copyDocument2 = _interopRequireDefault(_copyDocument);

var _draftUtils = require('../utils/draftUtils');

var _TimeAgo = require('../components/TimeAgo');

var _TimeAgo2 = _interopRequireDefault(_TimeAgo);

var _Editor = require('./styles/Editor.css');

var _Editor2 = _interopRequireDefault(_Editor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function navigateUrl(url) {
  window.open(url);
}

const preventDefault = ev => ev.preventDefault();

// Want a nicer api for listen/unlisten
function listen(target, eventType, callback, useCapture = false) {
  target.addEventListener(eventType, callback, useCapture);
  return function unlisten() {
    target.removeEventListener(eventType, callback, useCapture);
  };
}

const getDuplicateItem = (draft, published) => ({
  action: 'duplicate',
  title: 'Duplicate',
  icon: _contentCopyIcon2.default,
  divider: true,
  isDisabled: !draft && !published
});

const getDiscardItem = (draft, published) => ({
  action: 'discard',
  title: 'Discard changes…',
  icon: _undoIcon2.default,
  divider: true,
  isDisabled: !draft || !published
});

const getUnpublishItem = (draft, published) => ({
  action: 'unpublish',
  title: 'Unpublish…',
  icon: _visibilityOffIcon2.default,
  divider: true,
  isDisabled: !published
});

const getDeleteItem = (draft, published) => ({
  action: 'delete',
  title: 'Delete…',
  icon: _trashIcon2.default,
  divider: true,
  danger: true,
  isDisabled: !draft && !published
});

const getInspectItem = (draft, published) => ({
  action: 'inspect',
  title: _react2.default.createElement(
    'span',
    null,
    'Inspect ',
    _react2.default.createElement(
      'code',
      { className: _Editor2.default.hotkey },
      'Ctrl+Alt+I'
    )
  ),
  icon: _binaryIcon2.default,
  divider: true,
  isDisabled: !(draft || published)
});

const getProductionPreviewItem = (draft, published) => {
  const snapshot = draft || published;
  if (!snapshot || !_resolveProductionUrl2.default) {
    return null;
  }
  let previewUrl;
  try {
    previewUrl = (0, _resolveProductionUrl2.default)(snapshot);
  } catch (error) {
    error.message = `An error was thrown while trying to get production preview url: ${error.message}`;
    // eslint-disable-next-line no-console
    console.error(error);
    return null;
  }

  return previewUrl && {
    action: 'production-preview',
    title: _react2.default.createElement(
      'span',
      null,
      'Open preview ',
      _react2.default.createElement(
        'code',
        { className: _Editor2.default.hotkey },
        'Ctrl+Alt+O'
      )
    ),
    icon: _publicIcon2.default,
    url: previewUrl
  };
};

const getMenuItems = (draft, published) => [getProductionPreviewItem, getDiscardItem, getUnpublishItem, getDuplicateItem, getDeleteItem, getInspectItem].map(fn => fn(draft, published)).filter(Boolean);

const isValidationError = marker => marker.type === 'validation' && marker.level === 'error';

const INITIAL_STATE = {
  inspect: false,
  isMenuOpen: false,
  isCreatingDraft: false,
  showSavingStatus: false,
  showConfirmPublish: false,
  showConfirmDiscard: false,
  showConfirmDelete: false,
  showConfirmUnpublish: false,
  showValidationTooltip: false,
  focusPath: []
};

exports.default = (0, _router.withRouterHOC)((_temp2 = _class = class Editor extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = INITIAL_STATE, this.setSavingStatus = (0, _debounce3.default)(() => {
      this.setState({
        showSavingStatus: false
      });
    }, 1500, { trailing: true }), this.handleFocus = path => {
      this.setState({ focusPath: path });
    }, this.handleBlur = () => {
      // do nothing
    }, this.handleCreateCopy = () => {
      var _props = this.props;
      const router = _props.router,
            draft = _props.draft,
            published = _props.published;

      _document2.default.create((0, _draftUtils.newDraftFrom)((0, _copyDocument2.default)(draft || published))).subscribe(copied => {
        router.navigate(_extends({}, router.state, {
          action: 'edit',
          selectedDocumentId: (0, _draftUtils.getPublishedId)(copied._id)
        }));
      });
    }, this.handleEditAsActualType = () => {
      var _props2 = this.props;
      const router = _props2.router,
            draft = _props2.draft,
            published = _props2.published;

      const actualTypeName = draft._type || published._type;
      router.navigate(_extends({}, router.state, {
        selectedType: actualTypeName,
        action: 'edit'
      }));
    }, this.handleChange = changeEvent => {
      const onChange = this.props.onChange;

      onChange(changeEvent);
    }, this.handleRestore = () => {
      const deletedSnapshot = this.props.deletedSnapshot;

      this.props.onCreate(deletedSnapshot);
    }, this.handleMenuToggle = () => {
      this.setState(prevState => ({
        isMenuOpen: !prevState.isMenuOpen
      }));
    }, this.handleMenuClose = () => {
      this.setState({
        isMenuOpen: false
      });
    }, this.handlePublishRequested = () => {
      var _props3 = this.props;
      const markers = _props3.markers,
            validationPending = _props3.validationPending;

      const errors = markers.filter(isValidationError);
      const hasErrors = errors.length > 0;

      if (validationPending || hasErrors) {
        this.setState(prevState => ({
          showValidationTooltip: !prevState.showValidationTooltip
        }));
        return;
      }

      this.setState({ showConfirmPublish: true });
    }, this.handleCancelConfirmPublish = () => {
      this.setState({ showConfirmPublish: false });
    }, this.handleCancelUnpublish = () => {
      this.setState({ showConfirmUnpublish: false });
    }, this.handleCancelDelete = () => {
      this.setState({ showConfirmDelete: false });
    }, this.handleCancelDiscard = () => {
      this.setState({ showConfirmDiscard: false });
    }, this.handleConfirmPublish = () => {
      var _props4 = this.props;
      const onPublish = _props4.onPublish,
            draft = _props4.draft;

      onPublish(draft);
      this.setState({ showConfirmPublish: false });
    }, this.handleConfirmUnpublish = () => {
      const onUnpublish = this.props.onUnpublish;

      onUnpublish();
      this.setState({ showConfirmUnpublish: false });
    }, this.handleConfirmDiscard = () => {
      var _props5 = this.props;
      const onDiscardDraft = _props5.onDiscardDraft,
            draft = _props5.draft;

      onDiscardDraft(draft);
      this.setState({ showConfirmDiscard: false });
    }, this.handleConfirmDelete = () => {
      var _props6 = this.props;
      const onDelete = _props6.onDelete,
            onDiscardDraft = _props6.onDiscardDraft,
            published = _props6.published;

      if (published) {
        onDelete();
      } else {
        onDiscardDraft();
      }
      this.setState({ showConfirmDelete: false });
    }, this.handleHideInspector = () => {
      this.setState({ inspect: false });
    }, this.handleMenuClick = item => {
      if (item.action === 'production-preview') {
        navigateUrl(item.url);
      }

      if (item.action === 'delete') {
        this.setState({ showConfirmDelete: true });
      }

      if (item.action === 'discard') {
        this.setState({ showConfirmDiscard: true });
      }

      if (item.action === 'unpublish') {
        this.setState({ showConfirmUnpublish: true });
      }

      if (item.action === 'publish') {
        this.setState({ showConfirmPublish: true });
      }

      if (item.action === 'duplicate') {
        this.handleCreateCopy();
      }

      if (item.action === 'inspect') {
        this.setState({ inspect: true });
      }

      this.setState({ isMenuOpen: false });
    }, this.handleCloseValidationResults = () => {
      this.setState({ showValidationTooltip: false });
    }, this.handleToggleValidationResults = () => {
      this.setState(prevState => ({ showValidationTooltip: !prevState.showValidationTooltip }));
    }, this.renderFunctions = () => {
      var _props7 = this.props;
      const draft = _props7.draft,
            published = _props7.published,
            markers = _props7.markers,
            type = _props7.type,
            isReconnecting = _props7.isReconnecting;
      var _state = this.state;
      const showSavingStatus = _state.showSavingStatus,
            showValidationTooltip = _state.showValidationTooltip;


      const value = draft || published;

      const validation = markers.filter(marker => marker.type === 'validation');
      const errors = validation.filter(marker => marker.level === 'error');
      const warnings = validation.filter(marker => marker.level === 'warning');

      return _react2.default.createElement(
        'div',
        { className: _Editor2.default.paneFunctions },
        showSavingStatus && _react2.default.createElement(
          _reactTippy.Tooltip,
          {
            className: _Editor2.default.syncStatusSyncing,
            arrow: true,
            theme: 'light',
            size: 'small',
            distance: '0',
            title: 'Syncing your content with the Sanity cloud'
          },
          _react2.default.createElement(
            'span',
            { className: _Editor2.default.spinnerContainer },
            _react2.default.createElement(
              'span',
              { className: _Editor2.default.spinner },
              _react2.default.createElement(_syncIcon2.default, null)
            )
          ),
          ' ',
          'Syncing\u2026'
        ),
        isReconnecting && _react2.default.createElement(
          _reactTippy.Tooltip,
          {
            className: _Editor2.default.syncStatusSyncing,
            arrow: true,
            theme: 'light',
            size: 'small',
            distance: '0',
            title: 'Connection lost. Reconnecting\u2026'
          },
          _react2.default.createElement(
            'span',
            { className: _Editor2.default.spinnerContainer },
            _react2.default.createElement(
              'span',
              { className: _Editor2.default.spinner },
              _react2.default.createElement(_syncIcon2.default, null)
            )
          ),
          ' ',
          'Reconnecting\u2026'
        ),
        value && !showSavingStatus && !isReconnecting && _react2.default.createElement(
          _reactTippy.Tooltip,
          {
            className: _Editor2.default.syncStatusSynced,
            arrow: true,
            theme: 'light',
            size: 'small',
            distance: '0',
            title: 'Synced with the Sanity cloud'
          },
          _react2.default.createElement(_checkIcon2.default, null),
          ' Synced'
        ),
        (errors.length > 0 || warnings.length > 0) && _react2.default.createElement(
          _reactTippy.Tooltip,
          {
            arrow: true,
            theme: 'light noPadding',
            trigger: 'click',
            position: 'bottom',
            interactive: true,
            duration: 100,
            open: showValidationTooltip,
            onRequestClose: this.handleCloseValidationResults,
            style: { padding: 0 },
            html: _react2.default.createElement(_list2.default, {
              markers: validation,
              showLink: true,
              isOpen: showValidationTooltip,
              documentType: type,
              onClose: this.handleCloseValidationResults,
              onFocus: this.handleFocus
            })
          },
          _react2.default.createElement(
            _default2.default,
            {
              color: 'danger',
              icon: _warningIcon2.default,
              padding: 'small',
              onClick: this.handleToggleValidationResults
            },
            errors.length,
            ' ',
            _react2.default.createElement(_chevronDownIcon2.default, null)
          )
        ),
        _react2.default.createElement(
          _reactTippy.Tooltip,
          {
            arrow: true,
            theme: 'light',
            className: _Editor2.default.publishButton,
            title: errors.length > 0 ? 'Fix errors before publishing' : 'Ctrl+Alt+P'
          },
          _react2.default.createElement(
            _default2.default,
            {
              disabled: isReconnecting || !draft || errors.length > 0,
              onClick: this.handlePublishRequested,
              color: 'primary'
            },
            published ? 'Publish changes' : 'Publish'
          )
        )
      );
    }, this.renderMenu = () => {
      var _props8 = this.props;
      const draft = _props8.draft,
            published = _props8.published;

      return _react2.default.createElement(_default4.default, {
        onAction: this.handleMenuClick,
        isOpen: this.state.isMenuOpen,
        onClose: this.handleMenuClose,
        onClickOutside: this.handleMenuClose,
        items: getMenuItems(draft, published),
        origin: 'top-right'
      });
    }, _temp;
  }

  componentDidMount() {
    this.unlistenForKey = listen(window, 'keyup', event => {
      if (event.code === 'Escape' && this.state.showValidationTooltip) {
        this.setState({ showValidationTooltip: false });
        return;
      }

      if (event.ctrlKey && event.code === 'KeyI' && event.altKey && !event.shiftKey) {
        this.setState(prevState => ({ inspect: !prevState.inspect }));
        return;
      }

      if (event.ctrlKey && event.code === 'KeyP' && event.altKey && !event.shiftKey) {
        this.handlePublishRequested();
        return;
      }

      if (event.ctrlKey && event.code === 'KeyO' && event.altKey && !event.shiftKey) {
        var _props9 = this.props;
        const draft = _props9.draft,
              published = _props9.published;

        const item = getProductionPreviewItem(draft || published);
        if (item && item.url) {
          navigateUrl(item.url);
        }
      }
    });
  }

  componentWillUnmount() {
    this.unlistenForKey();
    this.setSavingStatus.cancel();
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.isSaving && !nextProps.isSaving) {
      this.setState({
        showSavingStatus: true
      });
      this.setSavingStatus();
    }

    const prevDocId = (this.props.draft || this.props.published || {})._id;
    const nextDocId = (nextProps.draft || nextProps.published || {})._id;
    if (prevDocId !== nextDocId) {
      this.setState({ focusPath: [] });
    }
  }

  getTitle(value) {
    const type = this.props.type;

    if (!value) {
      return `Creating new ${type.title || type.name}`;
    }
    return _react2.default.createElement(
      _preview.PreviewFields,
      { document: value, type: type, fields: ['title'] },
      ({ title }) => _react2.default.createElement(
        'span',
        null,
        title
      )
    );
  }

  render() {
    var _props10 = this.props;
    const draft = _props10.draft,
          markers = _props10.markers,
          published = _props10.published,
          type = _props10.type,
          isLoading = _props10.isLoading,
          isPublishing = _props10.isPublishing,
          isUnpublishing = _props10.isUnpublishing,
          isCreatingDraft = _props10.isCreatingDraft,
          isReconnecting = _props10.isReconnecting,
          patchChannel = _props10.patchChannel,
          transactionResult = _props10.transactionResult,
          onClearTransactionResult = _props10.onClearTransactionResult;
    var _state2 = this.state;
    const inspect = _state2.inspect,
          focusPath = _state2.focusPath,
          showConfirmPublish = _state2.showConfirmPublish,
          showConfirmDelete = _state2.showConfirmDelete,
          showConfirmDiscard = _state2.showConfirmDiscard,
          showConfirmUnpublish = _state2.showConfirmUnpublish;


    const value = draft || published;

    if (isLoading) {
      return _react2.default.createElement(
        'div',
        { className: _Editor2.default.root },
        _react2.default.createElement(_spinner2.default, { center: true, message: `Loading ${type.title}…` })
      );
    }

    const hasTypeMismatch = value && value._type && value._type !== type.name;
    if (hasTypeMismatch) {
      return _react2.default.createElement(
        'div',
        { className: _Editor2.default.typeMisMatchMessage },
        'This document is of type ',
        _react2.default.createElement(
          'code',
          null,
          value._type
        ),
        ' and cannot be edited as',
        ' ',
        _react2.default.createElement(
          'code',
          null,
          type.name
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            _default2.default,
            { onClick: this.handleEditAsActualType },
            'Edit as ',
            value._type,
            ' instead'
          )
        )
      );
    }

    return _react2.default.createElement(
      _default6.default,
      {
        title: this.getTitle(value),
        renderMenu: this.renderMenu,
        renderFunctions: this.renderFunctions,
        onMenuToggle: this.handleMenuToggle,
        isSelected: true // last pane is always selected for now
      },
      _react2.default.createElement(
        'div',
        { className: _Editor2.default.root },
        isCreatingDraft && _react2.default.createElement(_spinner2.default, { fullscreen: true, message: 'Making changes\u2026' }),
        isPublishing && _react2.default.createElement(_spinner2.default, { fullscreen: true, message: 'Publishing\u2026' }),
        isUnpublishing && _react2.default.createElement(_spinner2.default, { fullscreen: true, message: 'Unpublishing\u2026' }),
        _react2.default.createElement(
          'div',
          { className: _Editor2.default.top },
          _react2.default.createElement(
            'div',
            { className: _Editor2.default.editedDate },
            value && _react2.default.createElement(
              'span',
              null,
              'Edited ',
              _react2.default.createElement(_TimeAgo2.default, { time: value._updatedAt })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: _Editor2.default.publishedDate },
            published ? _react2.default.createElement(
              'span',
              null,
              'Published ',
              _react2.default.createElement(_TimeAgo2.default, { time: published._updatedAt })
            ) : 'Not published'
          )
        ),
        _react2.default.createElement(
          'form',
          {
            className: _Editor2.default.editor,
            onSubmit: preventDefault,
            id: 'Sanity_Default_DeskTool_Editor_ScrollContainer'
          },
          _react2.default.createElement(_formBuilder2.default, {
            schema: _schema2.default,
            patchChannel: patchChannel,
            value: draft || published || { _type: type.name },
            type: type,
            readOnly: isReconnecting,
            onBlur: this.handleBlur,
            onFocus: this.handleFocus,
            focusPath: focusPath,
            onChange: this.handleChange,
            markers: markers
          })
        ),
        _afterEditorComponent2.default.map((AfterEditorComponent, i) => _react2.default.createElement(AfterEditorComponent, { key: i, documentId: published._id })),
        inspect && _react2.default.createElement(_InspectView2.default, { value: value, onClose: this.handleHideInspector }),
        showConfirmPublish && _react2.default.createElement(_ConfirmPublish2.default, {
          draft: draft,
          published: published,
          onCancel: this.handleCancelConfirmPublish,
          onConfirm: this.handleConfirmPublish
        }),
        showConfirmDiscard && _react2.default.createElement(_ConfirmDiscard2.default, {
          draft: draft,
          published: published,
          onCancel: this.handleCancelDiscard,
          onConfirm: this.handleConfirmDiscard
        }),
        showConfirmDelete && _react2.default.createElement(_ConfirmDelete2.default, {
          draft: draft,
          published: published,
          onCancel: this.handleCancelDelete,
          onConfirm: this.handleConfirmDelete
        }),
        showConfirmUnpublish && _react2.default.createElement(_ConfirmUnpublish2.default, {
          draft: draft,
          published: published,
          onCancel: this.handleCancelUnpublish,
          onConfirm: this.handleConfirmUnpublish
        }),
        isReconnecting && _react2.default.createElement(
          _default8.default,
          { kind: 'warning' },
          _react2.default.createElement(_warningIcon2.default, null),
          ' Connection lost. Reconnecting\u2026'
        ),
        transactionResult && transactionResult.type === 'error' && _react2.default.createElement(
          _default8.default,
          {
            kind: 'danger',
            action: { title: 'Ok, got it' },
            onAction: onClearTransactionResult
          },
          _react2.default.createElement(
            'div',
            null,
            transactionResult.message,
            _react2.default.createElement(
              'details',
              null,
              transactionResult.error.message
            )
          )
        )
      )
    );
  }
}, _class.propTypes = {
  patchChannel: _propTypes2.default.object,
  draft: _propTypes2.default.object,
  published: _propTypes2.default.object,
  type: _propTypes2.default.object.isRequired,
  markers: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    path: _propTypes2.default.array
  })),
  router: _propTypes2.default.shape({
    state: _propTypes2.default.object
  }).isRequired,

  onDelete: _propTypes2.default.func,
  onCreate: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onDiscardDraft: _propTypes2.default.func,
  onPublish: _propTypes2.default.func,
  onUnpublish: _propTypes2.default.func,
  transactionResult: _propTypes2.default.shape({ type: _propTypes2.default.string }),
  onClearTransactionResult: _propTypes2.default.func,

  validationPending: _propTypes2.default.bool,
  isCreatingDraft: _propTypes2.default.bool,
  isUnpublishing: _propTypes2.default.bool,
  isPublishing: _propTypes2.default.bool,
  isReconnecting: _propTypes2.default.bool,
  isLoading: _propTypes2.default.bool,
  isSaving: _propTypes2.default.bool,
  deletedSnapshot: _propTypes2.default.object
}, _class.defaultProps = {
  markers: [],
  isLoading: false,
  isSaving: false,
  isUnpublishing: false,
  isPublishing: false,
  isReconnecting: false,
  isCreatingDraft: false,
  deletedSnapshot: null,
  transactionResult: null,
  onDelete() {},
  onCreate() {},
  onChange() {},
  onClearTransactionResult() {}
}, _temp2));