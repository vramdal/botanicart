'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = enhanceWithAvailHeight;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

var _enhanceWithAvailableHeight = require('./styles/enhanceWithAvailableHeight.css');

var _enhanceWithAvailableHeight2 = _interopRequireDefault(_enhanceWithAvailableHeight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function enhanceWithAvailHeight(Component) {
  var _class, _temp2;

  return _temp2 = _class = class enhancedWithAvailHeight extends _react2.default.PureComponent {
    constructor(...args) {
      var _temp;

      return _temp = super(...args), this.state = {}, this.setContainer = el => {
        if (el) {
          this.setup(el);
        }
      }, this.handleResize = () => {
        this.setState({ height: this._element.offsetHeight });
      }, _temp;
    }

    componentWillMount() {
      this.erd = (0, _elementResizeDetector2.default)({ strategy: 'scroll' });
    }

    componentWillUnmount() {
      this.teardown(this._element);
    }

    setup(el) {
      if (this._element) {
        this.teardown(this._element);
      }
      this.erd.listenTo(el, this.handleResize);
      this._element = el;
    }

    teardown(el) {
      this.erd.removeAllListeners(el);
      this.erd.uninstall(el);
      this._element = null;
    }

    render() {
      return _react2.default.createElement(
        'div',
        { className: _enhanceWithAvailableHeight2.default.root, ref: this.setContainer },
        _react2.default.createElement(Component, _extends({}, this.props, this.state))
      );
    }
  }, _class.displayName = `enhanceWithAvailHeight(${Component.displayName || Component.name})`, _temp2;
}