'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _uniqBy2 = require('lodash/uniqBy');

var _uniqBy3 = _interopRequireDefault(_uniqBy2);

var _partition4 = require('lodash/partition');

var _partition5 = _interopRequireDefault(_partition4);

var _class, _temp, _initialiseProps;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _DocumentsPane = require('./styles/DocumentsPane.css');

var _DocumentsPane2 = _interopRequireDefault(_DocumentsPane);

var _router = require('part:@sanity/base/router');

var _sortIcon = require('part:@sanity/base/sort-icon');

var _sortIcon2 = _interopRequireDefault(_sortIcon);

var _reactInk = require('react-ink');

var _reactInk2 = _interopRequireDefault(_reactInk);

var _ListView = require('./ListView');

var _ListView2 = _interopRequireDefault(_ListView);

var _visibilityOffIcon = require('part:@sanity/base/visibility-off-icon');

var _visibilityOffIcon2 = _interopRequireDefault(_visibilityOffIcon);

var _editIcon = require('part:@sanity/base/edit-icon');

var _editIcon2 = _interopRequireDefault(_editIcon);

var _queryContainer = require('part:@sanity/base/query-container');

var _queryContainer2 = _interopRequireDefault(_queryContainer);

var _draftUtils = require('../utils/draftUtils');

var _schema = require('part:@sanity/base/schema');

var _schema2 = _interopRequireDefault(_schema);

var _preview = require('part:@sanity/base/preview');

var _preview2 = _interopRequireDefault(_preview);

var _default = require('part:@sanity/components/panes/default');

var _default2 = _interopRequireDefault(_default);

var _DocumentsPaneMenu = require('./DocumentsPaneMenu');

var _DocumentsPaneMenu2 = _interopRequireDefault(_DocumentsPaneMenu);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

var _plusIcon = require('part:@sanity/base/plus-icon');

var _plusIcon2 = _interopRequireDefault(_plusIcon);

var _default5 = require('part:@sanity/components/snackbar/default');

var _default6 = _interopRequireDefault(_default5);

var _reactTippy = require('@sanity/react-tippy');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NOOP = () => {}; // eslint-disable-line

const LOCALSTORAGE_KEY = 'desk-tool.documents-pane-settings';

function readSettings() {
  return JSON.parse(window.localStorage.getItem(LOCALSTORAGE_KEY) || '{}');
}

function writeSettings(settings) {
  window.localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(settings));
}

function getDocumentKey(document) {
  return (0, _draftUtils.getPublishedId)(document._id);
}

function toGradientOrderClause(orderBy) {
  return orderBy.map(ordering => [ordering.field, ordering.direction].filter(Boolean).join(' ')).join(', ');
}

const ORDER_BY_UPDATED_AT = {
  title: 'Last edited',
  name: 'updatedAt',
  by: [{ field: '_updatedAt', direction: 'desc' }]
};

const ORDER_BY_CREATED_AT = {
  title: 'Created',
  name: 'createdAt',
  by: [{ field: '_createdAt', direction: 'desc' }]
};

const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT;
const DEFAULT_ORDERING_OPTIONS = [ORDER_BY_UPDATED_AT, ORDER_BY_CREATED_AT];

function removePublishedWithDrafts(documents) {
  var _partition2 = (0, _partition5.default)(documents.map(doc => doc._id), _draftUtils.isDraftId),
      _partition3 = _slicedToArray(_partition2, 2);

  const draftIds = _partition3[0],
        publishedIds = _partition3[1];


  return documents.map(doc => {
    const publishedId = (0, _draftUtils.getPublishedId)(doc._id);
    const draftId = (0, _draftUtils.getDraftId)(doc._id);
    return _extends({}, doc, {
      hasPublished: publishedIds.includes(publishedId),
      hasDraft: draftIds.includes(draftId)
    });
  }).filter(doc => !((0, _draftUtils.isPublishedId)(doc._id) && doc.hasDraft));
}

function writeSettingsForType(type, settings) {
  writeSettings(Object.assign(readSettings(), {
    [type]: settings
  }));
}

exports.default = (0, _router.withRouterHOC)((_temp = _class = class DocumentsPane extends _react2.default.PureComponent {

  constructor(props) {
    super();

    _initialiseProps.call(this);

    const settings = readSettings();
    this.state = {
      settings: settings && settings[props.selectedType] || {
        listLayout: 'default',
        ordering: DEFAULT_SELECTED_ORDERING_OPTION
      },
      menuIsOpen: false
    };
  }

  writeSettings() {
    writeSettingsForType(this.props.selectedType, this.state.settings);
  }

  getOrderingOptions(selectedType) {
    const type = _schema2.default.get(selectedType);

    const optionsWithDefaults = type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS;

    return (0, _uniqBy3.default)(optionsWithDefaults, 'name').map(option => {
      return _extends({}, option, {
        icon: option.icon || _sortIcon2.default,
        title: _react2.default.createElement(
          'span',
          null,
          'Sort by ',
          _react2.default.createElement(
            'b',
            null,
            option.title
          )
        )
      });
    });
  }

  render() {
    var _props = this.props;
    const selectedDocumentId = _props.selectedDocumentId,
          schemaType = _props.schemaType,
          isCollapsed = _props.isCollapsed,
          router = _props.router;
    const settings = this.state.settings;

    const currentOrderingOption = this.getOrderingOptions(schemaType.name).find(option => option.name === settings.ordering) || DEFAULT_SELECTED_ORDERING_OPTION;
    const params = { type: schemaType.name, draftsPath: `${_draftUtils.DRAFTS_FOLDER}.**` };
    const query = `*[_type == $type] | order(${toGradientOrderClause(currentOrderingOption.by)}) [0...10000] {_id, _type}`;
    var _router$state = router.state;
    const selectedType = _router$state.selectedType,
          action = _router$state.action;

    const isSelected = selectedType && !action && !selectedDocumentId;
    return _react2.default.createElement(
      _default2.default,
      _extends({}, this.props, {
        renderMenu: this.renderDocumentsPaneMenu,
        renderFunctions: this.renderFunctions,
        defaultWidth: 200,
        isCollapsed: isCollapsed,
        onMenuToggle: this.handleToggleMenu,
        scrollTop: this.state.scrollTop,
        isSelected: isSelected
      }),
      _react2.default.createElement(
        _queryContainer2.default,
        {
          query: query,
          params: params,
          type: schemaType,
          selectedId: selectedDocumentId,
          settings: settings
        },
        ({ result, loading, error, onRetry, type }) => {
          if (error) {
            return _react2.default.createElement(
              _default6.default,
              {
                kind: 'danger',
                action: { title: 'Retry' },
                onAction: onRetry
              },
              _react2.default.createElement(
                'div',
                null,
                'An error occurred while loading items:'
              ),
              _react2.default.createElement(
                'div',
                null,
                error.message
              )
            );
          }

          const items = removePublishedWithDrafts(result ? result.documents : []);

          if (!loading && (!items || items.length === 0)) {
            return _react2.default.createElement(
              'div',
              { className: _DocumentsPane2.default.empty },
              _react2.default.createElement(
                'div',
                null,
                _react2.default.createElement(
                  'h3',
                  null,
                  'There are no documents of type ',
                  _react2.default.createElement(
                    'strong',
                    null,
                    type.title
                  ),
                  ' yet.'
                ),
                (0, _get3.default)(this.props, 'router.state.action') !== 'edit' && _react2.default.createElement(
                  _default4.default,
                  { color: 'primary', icon: _plusIcon2.default, onClick: this.handleGoToCreateNew },
                  'New ',
                  type.title
                )
              )
            );
          }

          return _react2.default.createElement(
            'div',
            { className: _DocumentsPane2.default[`layout__${settings.listLayout}`] },
            loading && _react2.default.createElement(_spinner2.default, { center: true, message: 'Loading items\u2026' }),
            items && _react2.default.createElement(_ListView2.default, {
              onScroll: this.handleScroll,
              items: items,
              getItemKey: getDocumentKey,
              renderItem: this.renderDocumentPaneItem,
              listLayout: settings.listLayout
            })
          );
        }
      )
    );
  }
}, _class.propTypes = {
  selectedType: _propTypes2.default.string,
  selectedDocumentId: _propTypes2.default.string,
  schemaType: _propTypes2.default.object,
  isCollapsed: _propTypes2.default.bool,
  router: _propTypes2.default.object
}, _class.defaultProps = {
  loading: false,
  isCollapsed: false,
  published: [],
  drafts: [],
  onSetListLayout: NOOP
}, _initialiseProps = function _initialiseProps() {
  this.handleSetListLayout = listLayout => {
    this.setState(prevState => ({
      settings: _extends({}, prevState.settings, {
        listLayout: listLayout.key
      })
    }), this.writeSettings);
  };

  this.handleSetOrdering = ordering => {
    this.setState(prevState => ({
      settings: _extends({}, prevState.settings, {
        ordering: ordering.name
      })
    }), this.writeSettings);
  };

  this.handleToggleMenu = () => {
    this.setState({
      menuIsOpen: !this.state.menuIsOpen
    });
  };

  this.handleCloseMenu = () => {
    this.setState({
      menuIsOpen: !this.state.menuIsOpen
    });
  };

  this.handleGoToCreateNew = () => {
    var _props2 = this.props;
    const selectedType = _props2.selectedType,
          router = _props2.router;

    router.navigateIntent('create', { type: selectedType });
  };

  this.renderDocumentsPaneMenu = () => {
    const selectedType = this.props.selectedType;

    const type = _schema2.default.get(selectedType);
    return _react2.default.createElement(_DocumentsPaneMenu2.default, {
      onSetListLayout: this.handleSetListLayout,
      onSetOrdering: this.handleSetOrdering,
      onGoToCreateNew: this.handleGoToCreateNew,
      onMenuClose: this.handleCloseMenu,
      onClickOutside: this.handleCloseMenu,
      isOpen: this.state.menuIsOpen,
      orderingOptions: this.getOrderingOptions(selectedType),
      type: type
    });
  };

  this.renderStatus = item => {
    return _react2.default.createElement(
      'div',
      { className: _DocumentsPane2.default.itemStatus },
      !item.hasPublished && _react2.default.createElement(
        _reactTippy.Tooltip,
        { title: 'Not published', arrow: true, theme: 'light', distance: '2', sticky: true, size: 'small' },
        _react2.default.createElement(
          'i',
          null,
          _react2.default.createElement(_visibilityOffIcon2.default, null)
        )
      ),
      item.hasDraft && item.hasPublished && _react2.default.createElement(
        _reactTippy.Tooltip,
        { title: 'Has changes not yet published', arrow: true, theme: 'light', distance: '2', sticky: true, size: 'small' },
        _react2.default.createElement(
          'i',
          null,
          _react2.default.createElement(_editIcon2.default, null)
        )
      )
    );
  };

  this.renderDocumentPaneItem = (item, index, options = {}) => {
    var _props3 = this.props;
    const selectedType = _props3.selectedType,
          selectedDocumentId = _props3.selectedDocumentId;
    const settings = this.state.settings;


    const ordering = this.getOrderingOptions(selectedType).find(option => option.name === settings.ordering);

    const type = _schema2.default.get(selectedType);
    const linkState = {
      selectedDocumentId: (0, _draftUtils.getPublishedId)(item._id),
      selectedType: type.name,
      action: 'edit'
    };

    const isSelected = selectedDocumentId && (0, _draftUtils.getPublishedId)(item._id) === (0, _draftUtils.getPublishedId)(selectedDocumentId);

    return _react2.default.createElement(
      _router.StateLink,
      {
        state: linkState,
        className: _DocumentsPane2.default.link,
        tabIndex: 0
      },
      _react2.default.createElement(
        'div',
        { className: isSelected ? _DocumentsPane2.default.selectedItem : _DocumentsPane2.default.item },
        _react2.default.createElement(_preview2.default, {
          value: item,
          ordering: ordering,
          layout: settings.listLayout,
          type: type,
          status: () => this.renderStatus(item)
        })
      ),
      _react2.default.createElement(_reactInk2.default, { duration: 1000, opacity: 0.1, radius: 200 })
    );
  };

  this.renderFunctions = isCollapsed => {
    const selectedType = this.props.selectedType;

    const type = _schema2.default.get(selectedType);
    return _react2.default.createElement(_default4.default, {
      title: `Create new ${type.name}`,
      icon: _plusIcon2.default,
      color: 'primary',
      kind: 'simple',
      onClick: this.handleGoToCreateNew
    });
  };

  this.handleScroll = scrollTop => {
    this.setState({ scrollTop });
  };
}, _temp));