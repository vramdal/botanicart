'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let getOutputPath = (() => {
  var _ref2 = _asyncToGenerator(function* (destination, dataset, prompt, flags) {
    if (destination === '-') {
      return '-';
    }

    const dstPath = _path2.default.isAbsolute(destination) ? destination : _path2.default.resolve(process.cwd(), destination);

    let dstStats = yield _fsExtra2.default.stat(dstPath).catch(noop);
    const looksLikeFile = dstStats ? dstStats.isFile() : _path2.default.basename(dstPath).indexOf('.') !== -1;

    if (!dstStats) {
      const createPath = looksLikeFile ? _path2.default.dirname(dstPath) : dstPath;

      yield _fsExtra2.default.mkdirs(createPath);
    }

    const finalPath = looksLikeFile ? dstPath : _path2.default.join(dstPath, `${dataset}.tar.gz`);
    dstStats = yield _fsExtra2.default.stat(finalPath).catch(noop);

    if (!flags.overwrite && dstStats && dstStats.isFile()) {
      const shouldOverwrite = yield prompt.single({
        type: 'confirm',
        message: `File "${finalPath}" already exists, would you like to overwrite it?`,
        default: false
      });

      if (!shouldOverwrite) {
        return false;
      }
    }

    return finalPath;
  });

  return function getOutputPath(_x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
})();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _prettyMs = require('pretty-ms');

var _prettyMs2 = _interopRequireDefault(_prettyMs);

var _util = require('@sanity/util');

var _export = require('@sanity/export');

var _export2 = _interopRequireDefault(_export);

var _chooseDatasetPrompt = require('../../actions/dataset/chooseDatasetPrompt');

var _chooseDatasetPrompt2 = _interopRequireDefault(_chooseDatasetPrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const noop = () => null;

const helpText = `
Options
  --raw         Extract only documents, without rewriting asset references
  --no-assets   Export only non-asset documents and remove references to image assets
  --no-drafts   Export only published versions of documents
  --no-compress Skips compressing tarball entries (still generates a gzip file)
  --types       Defines which document types to export
  --overwrite   Overwrite any file with the same name

Examples
  sanity export moviedb localPath.tar.gz
  sanity export moviedb assetless.tar.gz --no-assets
  sanity export staging staging.tar.gz --raw
  sanity export staging staging.tar.gz --types products,shops
`;

exports.default = {
  name: 'export',
  group: 'dataset',
  signature: '[NAME] [DESTINATION]',
  description: 'Export dataset to local filesystem as a gzipped tarball',
  helpText,
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output,
            chalk = context.chalk,
            workDir = context.workDir,
            prompt = context.prompt;

      const client = apiClient();

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 2);

      const targetDataset = _args$argsWithoutOpti[0],
            targetDestination = _args$argsWithoutOpti[1];

      const flags = args.extOptions;
      const absolutify = _util.pathTools.absolutify;


      if (flags.types) {
        flags.types = `${flags.types}`.split(',');
      }

      let dataset = targetDataset ? `${targetDataset}` : null;
      if (!dataset) {
        dataset = yield (0, _chooseDatasetPrompt2.default)(context, { message: 'Select dataset to export' });
      }

      // Verify existence of dataset before trying to export from it
      const datasets = yield client.datasets.list();
      if (!datasets.find(function (set) {
        return set.name === dataset;
      })) {
        throw new Error(`Dataset with name "${dataset}" not found`);
      }

      let destinationPath = targetDestination;
      if (!destinationPath) {
        destinationPath = yield prompt.single({
          type: 'input',
          message: 'Output path:',
          default: _path2.default.join(workDir, `${dataset}.tar.gz`),
          filter: absolutify
        });
      }

      const outputPath = yield getOutputPath(destinationPath, dataset, prompt, flags);
      if (!outputPath) {
        output.print('Cancelled');
        return;
      }

      // If we are dumping to a file, let the user know where it's at
      if (outputPath !== '-') {
        output.print(`Exporting dataset "${chalk.cyan(dataset)}" to "${chalk.cyan(outputPath)}"`);
      }

      let currentStep = 'Exporting documents...';
      let spinner = output.spinner(currentStep).start();
      const onProgress = function onProgress(progress) {
        if (progress.step !== currentStep) {
          spinner.succeed();
          spinner = output.spinner(progress.step).start();
        } else if (progress.step === currentStep && progress.update) {
          spinner.text = `${progress.step} (${progress.current}/${progress.total})`;
        }

        currentStep = progress.step;
      };

      const start = Date.now();
      try {
        yield (0, _export2.default)(_extends({
          client,
          dataset,
          outputPath,
          onProgress
        }, flags));
        spinner.succeed();
      } catch (err) {
        spinner.fail();
        throw err;
      }

      output.print(`Export finished (${(0, _prettyMs2.default)(Date.now() - start)})`);
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()

  // eslint-disable-next-line complexity
};