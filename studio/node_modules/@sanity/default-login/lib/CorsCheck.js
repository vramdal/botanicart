'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const checkCors = () => Promise.all([_client2.default.request({ uri: '/ping', withCredentials: false }).then(() => true), _client2.default.request({ uri: '/users/me', withCredentials: false }).then(() => true).catch(() => false)]).then(res => ({
  isCorsError: res[0] && !res[1],
  pingResponded: res[0]
})).catch(error => ({ error }));

const linkRel = 'noopener noreferrer';

class CorsCheck extends _react.PureComponent {
  constructor(...args) {
    super(...args);
    this.state = { isLoading: true };
  }

  componentWillMount() {
    checkCors().then(res => this.setState({
      result: res,
      isLoading: false
    }));
  }

  renderWrapper(content) {
    const result = this.state.result;
    const response = result && result.error && result.error.response;
    const message = response && response.body && response.body.message;
    if (!message) {
      return content;
    }

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'p',
        null,
        'Error message:'
      ),
      _react2.default.createElement(
        'pre',
        null,
        _react2.default.createElement(
          'code',
          null,
          response.body.message
        )
      ),
      content
    );
  }

  render() {
    var _state = this.state;
    const isLoading = _state.isLoading,
          result = _state.result;

    const origin = window.location.origin || window.location.href.replace(new RegExp(`${window.location.pathname}$`), '');

    if (isLoading) {
      return _react2.default.createElement(_spinner2.default, { fullscreen: true, center: true });
    }

    const tld = _client2.default.config().apiHost.replace(/.*?sanity\.([a-z]+).*/, '$1');
    const projectId = _client2.default.config().projectId;
    const corsUrl = `https://manage.sanity.${tld}/projects/${projectId}/settings/api`;
    const response = result.error && result.error.response;

    if (response) {
      const is404 = response.statusCode === 404;
      const errType = response.body.attributes && response.body.attributes.type;
      if (is404 && errType === 'project') {
        return _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'p',
            null,
            response.body.message || response.statusCode
          ),
          _react2.default.createElement(
            'p',
            null,
            'Double-check that your ',
            _react2.default.createElement(
              'code',
              null,
              'sanity.json'
            ),
            ' points to the right project ID?'
          )
        );
      }
    }

    if (result.isCorsError) {
      return this.renderWrapper(_react2.default.createElement(
        'p',
        null,
        'It seems the error could be caused by the current origin (',
        _react2.default.createElement(
          'code',
          null,
          origin
        ),
        ') not being an allowed origin for this project. If you are an administrator or developer of the project, you can head to ',
        _react2.default.createElement(
          'a',
          { rel: linkRel, target: '_blank', href: corsUrl },
          'the project management'
        ),
        ' interface and add the origin under the ',
        _react2.default.createElement(
          'em',
          null,
          'CORS Origins'
        ),
        ' section.'
      ));
    }

    if (result.pingResponded) {
      return this.renderWrapper(_react2.default.createElement(
        'p',
        null,
        'The cause of this error is a little uncertain. It could be a temporary glitch, in which case you might want to try hitting the ',
        _react2.default.createElement(
          'strong',
          null,
          'Retry'
        ),
        ' button below. If you are the developer of this project, you could take a look at the browsers developer console and see if any issues are reported there.'
      ));
    }

    return this.renderWrapper(_react2.default.createElement(
      'p',
      null,
      'It might be that your internet connection is unstable or down, or it ',
      _react2.default.createElement(
        'em',
        null,
        'might'
      ),
      ' be the Sanity API is having some issues, in which case it should hopefully be back up soon! You could also try hitting the ',
      _react2.default.createElement(
        'strong',
        null,
        'Retry'
      ),
      ' button and see if it was just a temporary glitch.'
    ));
  }
}

exports.default = CorsCheck;