'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _configSanity = require('config:sanity');

var _configSanity2 = _interopRequireDefault(_configSanity);

var _LoginDialog = require('./styles/LoginDialog.css');

var _LoginDialog2 = _interopRequireDefault(_LoginDialog);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _brandLogo = require('part:@sanity/base/brand-logo?');

var _brandLogo2 = _interopRequireDefault(_brandLogo);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const projectName = _configSanity2.default.project && _configSanity2.default.project.name || '';

const checkCookies = () => {
  return _client2.default.request({ method: 'post', uri: '/auth/testCookie', withCredentials: true }).then(() => {
    return _client2.default.request({ uri: '/auth/testCookie', withCredentials: true }).then(() => true).catch(() => false);
  }).then(result => ({ isCookieError: !result })).catch(error => ({ error }));
};

class CookieTest extends _react.PureComponent {

  constructor(...args) {
    super(...args);
    this.state = { isLoading: true };
  }

  componentWillMount() {
    checkCookies().then(res => this.setState({
      result: res,
      isLoading: false
    }));
  }

  renderWhiteListForm() {
    // eslint-disable-line class-methods-use-this
    var _props = this.props;
    const SanityLogo = _props.SanityLogo,
          sanityLogo = _props.sanityLogo;

    const redirectTo = `${_client2.default.clientConfig.url}/auth/whitelist?redirectTo=${encodeURIComponent(window.location.toString())}`;
    return _react2.default.createElement(
      'div',
      { className: _LoginDialog2.default.root },
      _react2.default.createElement(
        'div',
        { className: _LoginDialog2.default.inner },
        SanityLogo && _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.sanityLogo },
          _react2.default.createElement(SanityLogo, null)
        ),
        sanityLogo && !SanityLogo && _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.sanityLogo },
          sanityLogo
        ),
        _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.branding },
          _react2.default.createElement(
            'h1',
            { className: _brandLogo2.default ? _LoginDialog2.default.projectNameHidden : _LoginDialog2.default.projectName },
            projectName
          ),
          _brandLogo2.default && _react2.default.createElement(
            'div',
            { className: _LoginDialog2.default.brandLogoContainer },
            _react2.default.createElement(_brandLogo2.default, { projectName: projectName })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.title },
          _react2.default.createElement(
            'h2',
            { className: _LoginDialog2.default.headline },
            'Accept the Cookie'
          )
        ),
        _react2.default.createElement(
          'div',
          { className: _LoginDialog2.default.description },
          _react2.default.createElement(
            'p',
            null,
            'Your browser didn\'t accept our cookie so we\'re having trouble logging you in.'
          ),
          _react2.default.createElement(
            'p',
            null,
            'You can explicitly accept it though by clicking below.'
          )
        ),
        _react2.default.createElement(
          'form',
          {
            method: 'post',
            className: _LoginDialog2.default.acceptCookieForm,
            action: `${_client2.default.clientConfig.url}/auth/testCookie`,
            encType: 'application/x-www-form-urlencoded'
          },
          _react2.default.createElement('input', { type: 'hidden', name: 'redirectTo', value: redirectTo }),
          _react2.default.createElement(
            _default2.default,
            { color: 'success', inverted: true, type: 'submit' },
            'ACCEPT COOKIE'
          )
        )
      )
    );
  }

  render() {
    var _state = this.state;
    const isLoading = _state.isLoading,
          result = _state.result;


    if (isLoading) {
      return _react2.default.createElement(_spinner2.default, { fullscreen: true, center: true });
    }

    if (result.isCookieError) {
      return this.renderWhiteListForm();
    }

    return _react2.default.createElement(
      'div',
      null,
      this.props.children
    );
  }
}

CookieTest.propTypes = {
  children: _propTypes2.default.node.isRequired
};
CookieTest.propTypes = {
  sanityLogo: _propTypes2.default.node,
  SanityLogo: _propTypes2.default.func
};

exports.default = CookieTest;