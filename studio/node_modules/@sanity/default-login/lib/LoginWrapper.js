'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _user = require('part:@sanity/base/user');

var _user2 = _interopRequireDefault(_user);

var _CookieTest = require('./CookieTest');

var _CookieTest2 = _interopRequireDefault(_CookieTest);

var _loginDialog = require('part:@sanity/base/login-dialog');

var _loginDialog2 = _interopRequireDefault(_loginDialog);

var _ErrorDialog = require('./ErrorDialog');

var _ErrorDialog2 = _interopRequireDefault(_ErrorDialog);

var _sanityStudioLogo = require('part:@sanity/base/sanity-studio-logo');

var _sanityStudioLogo2 = _interopRequireDefault(_sanityStudioLogo);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _UnauthorizedUser = require('./UnauthorizedUser');

var _UnauthorizedUser2 = _interopRequireDefault(_UnauthorizedUser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isProjectLogin = _client2.default.config().useProjectHostname;
const projectId = isProjectLogin && _client2.default.config().projectId ? _client2.default.config().projectId : null;

class LoginWrapper extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = { isLoading: true, user: null, error: null }, this.handleRetry = () => {
      this.setState({ error: null, isLoading: true });
      _user2.default.actions.retry();
    }, _temp;
  }

  componentWillMount() {
    this.userSubscription = _user2.default.currentUser.subscribe({
      next: evt => this.setState({ user: evt.user, error: evt.error, isLoading: false }),
      error: _error => this.setState({ error: _error, isLoading: false })
    });
  }

  componentWillUnmount() {
    this.userSubscription.unsubscribe();
  }

  render() {
    var _state = this.state;
    const error = _state.error,
          user = _state.user,
          isLoading = _state.isLoading;
    var _props = this.props;
    const children = _props.children,
          LoadingScreen = _props.LoadingScreen,
          SanityLogo = _props.SanityLogo,
          sanityLogo = _props.sanityLogo;

    if (isLoading) {
      return typeof LoadingScreen === 'function' ? _react2.default.createElement(LoadingScreen, { center: true, fullscreen: true }) : LoadingScreen;
    }

    if (error) {
      return _react2.default.createElement(_ErrorDialog2.default, { onRetry: this.handleRetry, error: error });
    }

    if (!user) {
      return _react2.default.createElement(
        _CookieTest2.default,
        this.props,
        _react2.default.createElement(_loginDialog2.default, {
          title: this.props.title,
          description: this.props.description,
          SanityLogo: !sanityLogo && SanityLogo,
          sanityLogo: sanityLogo,
          projectId: projectId
        })
      );
    }

    if (projectId && !user.role) {
      return _react2.default.createElement(_UnauthorizedUser2.default, { user: user });
    }

    return typeof children === 'function' ? children(user) : children;
  }
}
exports.default = LoginWrapper;
LoginWrapper.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]).isRequired,
  title: _propTypes2.default.node,
  description: _propTypes2.default.node,
  sanityLogo: _propTypes2.default.node,
  SanityLogo: _propTypes2.default.func,
  LoadingScreen: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func])
};
LoginWrapper.defaultProps = {
  title: 'Choose login provider',
  description: null,
  sanityLogo: null,
  SanityLogo: _sanityStudioLogo2.default,
  LoadingScreen: _spinner2.default
};